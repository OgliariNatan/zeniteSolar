
MA_sisAux2016.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000670  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a1  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf2  00000000  00000000  00001ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da8  00000000  00000000  00002ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  0000388c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055b  00000000  00000000  00003b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000afb  00000000  00000000  0000408f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004b8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
	...

0000006c <_mcp2515_cnf>:
  6c:	04 b6 e7 04 b6 d3 04 b6 c7 04 b6 c3 02 90 07 03     ................
  7c:	ac 81 03 ac 80 02 90 00                             ........

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf ef       	ldi	r28, 0xFF	; 255
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	11 e0       	ldi	r17, 0x01	; 1
  92:	a0 e0       	ldi	r26, 0x00	; 0
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	ec ef       	ldi	r30, 0xFC	; 252
  98:	f5 e0       	ldi	r31, 0x05	; 5
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a0 30       	cpi	r26, 0x00	; 0
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a4 30       	cpi	r26, 0x04	; 4
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  ba:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <main>:

const uint8_t can_filter[] PROGMEM;


int main(void)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	68 97       	sbiw	r28, 0x18	; 24
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
	DDRD |= (1 << BOMBA1); 
  d6:	56 9a       	sbi	0x0a, 6	; 10
	DDRB |= (1 << BOMBA2);
  d8:	20 9a       	sbi	0x04, 0	; 4
	//|| (1 << TensaoBat) configurar adc
	uint8_t rId = 0;
	// Initialize MCP2515
	can_init(BITRATE_125_KBPS);
  da:	84 e0       	ldi	r24, 0x04	; 4
  dc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <can_init>

	
	can_set_mode(NORMAL_MODE);//!<Modo de operação normal
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	0e 94 73 02 	call	0x4e6	; 0x4e6 <can_set_mode>
	
	//can_disable_filter(0xff);
	
	// Load filters and masks
	can_static_filter(can_filter);
  e6:	88 e6       	ldi	r24, 0x68	; 104
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 93 02 	call	0x526	; 0x526 <can_static_filter>
	
	
	//!<Cria mensagem a ser enviada
	can_t msg;
	
	msg.length = 5;
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	8c 83       	std	Y+4, r24	; 0x04
	msg.data[0] = 0xde;
  f2:	8e ed       	ldi	r24, 0xDE	; 222
  f4:	8d 83       	std	Y+5, r24	; 0x05
	msg.data[1] = 0xad;
  f6:	8d ea       	ldi	r24, 0xAD	; 173
  f8:	8e 83       	std	Y+6, r24	; 0x06
	msg.data[2] = 0xbe;
  fa:	8e eb       	ldi	r24, 0xBE	; 190
  fc:	8f 83       	std	Y+7, r24	; 0x07
	msg.data[3] = 0xef;
  fe:	8f ee       	ldi	r24, 0xEF	; 239
 100:	88 87       	std	Y+8, r24	; 0x08
	msg.data[4] = 0xef;
 102:	89 87       	std	Y+9, r24	; 0x09
	
	
	msg.id = 0;
 104:	1a 82       	std	Y+2, r1	; 0x02
 106:	19 82       	std	Y+1, r1	; 0x01
	msg.flags.rtr = 0;
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	8e 7f       	andi	r24, 0xFE	; 254
 10c:	8b 83       	std	Y+3, r24	; 0x03
		if (can_check_message()){//!<Verifica se uma nova mensagem foi recebida
		
			if (can_get_message(&dado));//!<Tenta ler a mensagem
		}
		
		estados.Bomba1 = dado.data[0];
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	11 e0       	ldi	r17, 0x01	; 1
	msg.flags.rtr = 0;
	
		
	while (1)
	{	
		can_send_message(&msg);
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	0e 94 1b 02 	call	0x436	; 0x436 <can_send_message>
		can_t dado;		
		if (can_check_message()){//!<Verifica se uma nova mensagem foi recebida
 11a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <can_check_message>
 11e:	88 23       	and	r24, r24
 120:	21 f0       	breq	.+8      	; 0x12a <main+0x68>
		
			if (can_get_message(&dado));//!<Tenta ler a mensagem
 122:	ce 01       	movw	r24, r28
 124:	0d 96       	adiw	r24, 0x0d	; 13
 126:	0e 94 68 01 	call	0x2d0	; 0x2d0 <can_get_message>
		}
		
		estados.Bomba1 = dado.data[0];
 12a:	89 89       	ldd	r24, Y+17	; 0x11
 12c:	f8 01       	movw	r30, r16
 12e:	80 83       	st	Z, r24
		estados.Bomba2 = dado.data[1];
 130:	8a 89       	ldd	r24, Y+18	; 0x12
 132:	81 83       	std	Z+1, r24	; 0x01
		
		//rId = mcp2515_read_id(dado.id);
	
		if (estados.Bomba1) {//!<inverte o estado da bomba1 de porão.
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	11 f0       	breq	.+4      	; 0x13e <main+0x7c>
			PORTD |= (1<<BOMBA1);
 13a:	5e 9a       	sbi	0x0b, 6	; 11
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0x80>
		}else{
			PORTD &= (0<<BOMBA1);
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	1b b8       	out	0x0b, r1	; 11
		}
		
		if (estados.Bomba2) {//!<inverte o estado da bomba2 de porão.
 142:	f8 01       	movw	r30, r16
 144:	81 81       	ldd	r24, Z+1	; 0x01
 146:	88 23       	and	r24, r24
 148:	11 f0       	breq	.+4      	; 0x14e <main+0x8c>
			PORTD |= (1<<BOMBA2);
 14a:	58 9a       	sbi	0x0b, 0	; 11
 14c:	e2 cf       	rjmp	.-60     	; 0x112 <main+0x50>
		}else{
			PORTD &= (0<<BOMBA2);
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	1b b8       	out	0x0b, r1	; 11
		}
	}
 152:	df cf       	rjmp	.-66     	; 0x112 <main+0x50>

00000154 <mcp2515_write_register>:
	#error	invaild value of MCP2515_CLKOUT_PRESCALER
#endif

// -------------------------------------------------------------------------
void mcp2515_write_register( uint8_t adress, uint8_t data )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	d8 2f       	mov	r29, r24
 15a:	c6 2f       	mov	r28, r22
	RESET(MCP2515_CS);
 15c:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(SPI_WRITE);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	spi_putc(adress);
 164:	8d 2f       	mov	r24, r29
 166:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	spi_putc(data);
 16a:	8c 2f       	mov	r24, r28
 16c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	
	SET(MCP2515_CS);
 170:	2a 9a       	sbi	0x05, 2	; 5
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <mcp2515_read_register>:

// -------------------------------------------------------------------------
uint8_t mcp2515_read_register(uint8_t adress)
{
 178:	cf 93       	push	r28
 17a:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	RESET(MCP2515_CS);
 17c:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(SPI_READ);
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	spi_putc(adress);
 184:	8c 2f       	mov	r24, r28
 186:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	
	data = spi_putc(0xff);	
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	
	SET(MCP2515_CS);
 190:	2a 9a       	sbi	0x05, 2	; 5
	
	return data;
}
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	18 2f       	mov	r17, r24
 19e:	d6 2f       	mov	r29, r22
 1a0:	c4 2f       	mov	r28, r20
	RESET(MCP2515_CS);
 1a2:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(SPI_BIT_MODIFY);
 1a4:	85 e0       	ldi	r24, 0x05	; 5
 1a6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	spi_putc(adress);
 1aa:	81 2f       	mov	r24, r17
 1ac:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	spi_putc(mask);
 1b0:	8d 2f       	mov	r24, r29
 1b2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	spi_putc(data);
 1b6:	8c 2f       	mov	r24, r28
 1b8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	
	SET(MCP2515_CS);
 1bc:	2a 9a       	sbi	0x05, 2	; 5
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	08 95       	ret

000001c6 <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;
	
	RESET(MCP2515_CS);
 1c6:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(type);
 1c8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	data = spi_putc(0xff);
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	
	SET(MCP2515_CS);
 1d2:	2a 9a       	sbi	0x05, 2	; 5
	
	return data;
}
 1d4:	08 95       	ret

000001d6 <can_init>:
	}
};

// -------------------------------------------------------------------------
bool mcp2515_init(can_bitrate_t bitrate)
{
 1d6:	cf 92       	push	r12
 1d8:	df 92       	push	r13
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
	if (bitrate >= 8)
 1e6:	88 30       	cpi	r24, 0x08	; 8
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <can_init+0x16>
 1ea:	62 c0       	rjmp	.+196    	; 0x2b0 <can_init+0xda>
 1ec:	c8 2f       	mov	r28, r24
		return false;
	
	SET(MCP2515_CS);
 1ee:	2a 9a       	sbi	0x05, 2	; 5
	SET_OUTPUT(MCP2515_CS);
 1f0:	22 9a       	sbi	0x04, 2	; 4
	
	// Aktivieren der Pins fuer das SPI Interface
	RESET(P_SCK);
 1f2:	2d 98       	cbi	0x05, 5	; 5
	RESET(P_MOSI);
 1f4:	2b 98       	cbi	0x05, 3	; 5
	RESET(P_MISO);
 1f6:	2c 98       	cbi	0x05, 4	; 5
	
	SET_OUTPUT(P_SCK);
 1f8:	25 9a       	sbi	0x04, 5	; 4
	SET_OUTPUT(P_MOSI);
 1fa:	23 9a       	sbi	0x04, 3	; 4
	SET_INPUT(P_MISO);
 1fc:	24 98       	cbi	0x04, 4	; 4
	
	// SPI Einstellung setzen
	mcp2515_spi_init();
 1fe:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <mcp2515_spi_init>
	
	// MCP2515 per Software Reset zuruecksetzten,
	// danach ist er automatisch im Konfigurations Modus
	RESET(MCP2515_CS);
 202:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_RESET);
 204:	80 ec       	ldi	r24, 0xC0	; 192
 206:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	89 ef       	ldi	r24, 0xF9	; 249
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <can_init+0x38>
 212:	00 c0       	rjmp	.+0      	; 0x214 <can_init+0x3e>
 214:	00 00       	nop
	
	_delay_ms(1);
	
	SET(MCP2515_CS);
 216:	2a 9a       	sbi	0x05, 2	; 5
 218:	83 ec       	ldi	r24, 0xC3	; 195
 21a:	99 e0       	ldi	r25, 0x09	; 9
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <can_init+0x46>
 220:	00 c0       	rjmp	.+0      	; 0x222 <can_init+0x4c>
 222:	00 00       	nop
	
	// ein bisschen warten bis der MCP2515 sich neu gestartet hat
	_delay_ms(10);
	
	// CNF1..3 Register laden (Bittiming)
	RESET(MCP2515_CS);
 224:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_WRITE);
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	spi_putc(CNF3);
 22c:	88 e2       	ldi	r24, 0x28	; 40
 22e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
 232:	8c 2f       	mov	r24, r28
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	6c 01       	movw	r12, r24
 238:	cc 0c       	add	r12, r12
 23a:	dd 1c       	adc	r13, r13
 23c:	c8 0e       	add	r12, r24
 23e:	d9 1e       	adc	r13, r25
 240:	00 e0       	ldi	r16, 0x00	; 0
 242:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i=0; i<3 ;i++ ) {
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
 244:	ec 01       	movw	r28, r24
 246:	7e 01       	movw	r14, r28
 248:	f8 01       	movw	r30, r16
 24a:	ec 0d       	add	r30, r12
 24c:	fd 1d       	adc	r31, r13
 24e:	e4 59       	subi	r30, 0x94	; 148
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	84 91       	lpm	r24, Z
 254:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
 258:	0f 5f       	subi	r16, 0xFF	; 255
 25a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// CNF1..3 Register laden (Bittiming)
	RESET(MCP2515_CS);
	spi_putc(SPI_WRITE);
	spi_putc(CNF3);
	for (uint8_t i=0; i<3 ;i++ ) {
 25c:	03 30       	cpi	r16, 0x03	; 3
 25e:	11 05       	cpc	r17, r1
 260:	91 f7       	brne	.-28     	; 0x246 <can_init+0x70>
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
	}
	// aktivieren/deaktivieren der Interrupts
	spi_putc(MCP2515_INTERRUPTS);
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	SET(MCP2515_CS);
 268:	2a 9a       	sbi	0x05, 2	; 5
	
	// TXnRTS Bits als Inputs schalten
	mcp2515_write_register(TXRTSCTRL, 0);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	8d e0       	ldi	r24, 0x0D	; 13
 26e:	0e 94 aa 00 	call	0x154	; 0x154 <mcp2515_write_register>
	
	#if defined(MCP2515_INT)
		SET_INPUT(MCP2515_INT);
 272:	38 98       	cbi	0x07, 0	; 7
		SET(MCP2515_INT);
 274:	40 9a       	sbi	0x08, 0	; 8
			// activate the pin RX1BF as GPIO which is connected 
			// to RS of MCP2551 and set it to 0
			mcp2515_write_register(BFPCTRL, (1<<B1BFE));
		#else
			// Deaktivieren der Pins RXnBF Pins (High Impedance State)
			mcp2515_write_register(BFPCTRL, 0);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	8c e0       	ldi	r24, 0x0C	; 12
 27a:	0e 94 aa 00 	call	0x154	; 0x154 <mcp2515_write_register>
	#endif
	
	// Testen ob das auf die beschreibenen Register zugegriffen werden kann
	// (=> ist der Chip ueberhaupt ansprechbar?)
	bool error = false;
	if (mcp2515_read_register(CNF2) != pgm_read_byte(&_mcp2515_cnf[bitrate][1])) {
 27e:	89 e2       	ldi	r24, 0x29	; 41
 280:	0e 94 bc 00 	call	0x178	; 0x178 <mcp2515_read_register>
 284:	c8 2f       	mov	r28, r24
 286:	f7 01       	movw	r30, r14
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	ee 0d       	add	r30, r14
 28e:	ff 1d       	adc	r31, r15
 290:	e3 59       	subi	r30, 0x93	; 147
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	e4 90       	lpm	r14, Z
		error = true;
	}
	
	// Device zurueck in den normalen Modus versetzten
	// und aktivieren/deaktivieren des Clkout-Pins
	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	8f e0       	ldi	r24, 0x0F	; 15
 29a:	0e 94 aa 00 	call	0x154	; 0x154 <mcp2515_write_register>
	
	if (error) {
 29e:	ce 11       	cpse	r28, r14
 2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <can_init+0xde>
		return false;
	}
	else
	{
		while ((mcp2515_read_register(CANSTAT) & 0xe0) != 0) {
 2a2:	8e e0       	ldi	r24, 0x0E	; 14
 2a4:	0e 94 bc 00 	call	0x178	; 0x178 <mcp2515_read_register>
 2a8:	80 7e       	andi	r24, 0xE0	; 224
 2aa:	d9 f7       	brne	.-10     	; 0x2a2 <can_init+0xcc>
			// warten bis der neue Modus uebernommen wurde
		}
		
		return true;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <can_init+0xe0>

// -------------------------------------------------------------------------
bool mcp2515_init(can_bitrate_t bitrate)
{
	if (bitrate >= 8)
		return false;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <can_init+0xe0>
	// Device zurueck in den normalen Modus versetzten
	// und aktivieren/deaktivieren des Clkout-Pins
	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
	
	if (error) {
		return false;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
			// warten bis der neue Modus uebernommen wurde
		}
		
		return true;
	}
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	08 95       	ret

000002c8 <can_check_message>:
// check if there are any new messages waiting

bool mcp2515_check_message(void)
{
	#if defined(MCP2515_INT)
		return ((!IS_SET(MCP2515_INT)) ? true : false);
 2c8:	86 b1       	in	r24, 0x06	; 6
 2ca:	80 95       	com	r24
				return false;
		#else
			return ((mcp2515_read_status(SPI_RX_STATUS) & 0xC0) ? true : false);
		#endif
	#endif
}
 2cc:	81 70       	andi	r24, 0x01	; 1
 2ce:	08 95       	ret

000002d0 <can_get_message>:
#ifdef	SUPPORT_FOR_MCP2515__

// ----------------------------------------------------------------------------

uint8_t mcp2515_get_message(can_t *msg)
{
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	6c 01       	movw	r12, r24
			addr = SPI_READ_RX | 0x04;
		else
			return 0;
	#else
		// read status
		uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
 2e2:	80 eb       	ldi	r24, 0xB0	; 176
 2e4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <mcp2515_read_status>
 2e8:	c8 2f       	mov	r28, r24
		
		if (_bit_is_set(status,6)) {
 2ea:	d8 2f       	mov	r29, r24
 2ec:	d0 74       	andi	r29, 0x40	; 64
 2ee:	86 fd       	sbrc	r24, 6
 2f0:	53 c0       	rjmp	.+166    	; 0x398 <can_get_message+0xc8>
			// message in buffer 0
			addr = SPI_READ_RX;
		}
		else if (_bit_is_set(status,7)) {
 2f2:	88 23       	and	r24, r24
 2f4:	0c f0       	brlt	.+2      	; 0x2f8 <can_get_message+0x28>
 2f6:	5a c0       	rjmp	.+180    	; 0x3ac <can_get_message+0xdc>
 2f8:	3d c0       	rjmp	.+122    	; 0x374 <can_get_message+0xa4>
			return 0;
		}
	#endif
	
	// read DLC
	uint8_t length = spi_putc(0xff);
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
		if (!(tmp & 0x01))
			msg->flags.rtr = (tmp & 0x02) ? 1 : 0;
		else
			msg->flags.rtr = (length & (1<<RTR)) ? 1 : 0;
	#else
		msg->flags.rtr = (_bit_is_set(status, 3)) ? 1 : 0;
 300:	c3 fb       	bst	r28, 3
 302:	99 27       	eor	r25, r25
 304:	90 f9       	bld	r25, 0
 306:	f6 01       	movw	r30, r12
 308:	22 81       	ldd	r18, Z+2	; 0x02
 30a:	90 fb       	bst	r25, 0
 30c:	20 f9       	bld	r18, 0
 30e:	22 83       	std	Z+2, r18	; 0x02
	#endif
	
	length &= 0x0f;
 310:	8f 70       	andi	r24, 0x0F	; 15
	msg->length = length;
 312:	83 83       	std	Z+3, r24	; 0x03
	// read data
	for (uint8_t i=0;i<length;i++) {
 314:	88 23       	and	r24, r24
 316:	a9 f0       	breq	.+42     	; 0x342 <can_get_message+0x72>
 318:	86 01       	movw	r16, r12
 31a:	0c 5f       	subi	r16, 0xFC	; 252
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	9f ef       	ldi	r25, 0xFF	; 255
 320:	98 0f       	add	r25, r24
 322:	e9 2e       	mov	r14, r25
 324:	f1 2c       	mov	r15, r1
 326:	f5 e0       	ldi	r31, 0x05	; 5
 328:	ef 0e       	add	r14, r31
 32a:	f1 1c       	adc	r15, r1
 32c:	ec 0c       	add	r14, r12
 32e:	fd 1c       	adc	r15, r13
		msg->data[i] = spi_putc(0xff);
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
 336:	f8 01       	movw	r30, r16
 338:	81 93       	st	Z+, r24
 33a:	8f 01       	movw	r16, r30
	#endif
	
	length &= 0x0f;
	msg->length = length;
	// read data
	for (uint8_t i=0;i<length;i++) {
 33c:	ee 15       	cp	r30, r14
 33e:	ff 05       	cpc	r31, r15
 340:	b9 f7       	brne	.-18     	; 0x330 <can_get_message+0x60>
		msg->data[i] = spi_putc(0xff);
	}
	SET(MCP2515_CS);
 342:	2a 9a       	sbi	0x05, 2	; 5
	
	// clear interrupt flag
	#ifdef RXnBF_FUNKTION
	if (!IS_SET(MCP2515_RX0BF))
	#else
	if (_bit_is_set(status, 6))
 344:	dd 23       	and	r29, r29
 346:	31 f0       	breq	.+12     	; 0x354 <can_get_message+0x84>
	#endif
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	8c e2       	ldi	r24, 0x2C	; 44
 34e:	0e 94 cb 00 	call	0x196	; 0x196 <mcp2515_bit_modify>
 352:	05 c0       	rjmp	.+10     	; 0x35e <can_get_message+0x8e>
	else
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	8c e2       	ldi	r24, 0x2C	; 44
 35a:	0e 94 cb 00 	call	0x196	; 0x196 <mcp2515_bit_modify>
	CAN_INDICATE_RX_TRAFFIC_FUNCTION;
	
	#ifdef RXnBF_FUNKTION
		return 1;
	#else
		return (status & 0x07) + 1;
 35e:	c7 70       	andi	r28, 0x07	; 7
 360:	d1 e0       	ldi	r29, 0x01	; 1
 362:	dc 0f       	add	r29, r28
 364:	23 c0       	rjmp	.+70     	; 0x3ac <can_get_message+0xdc>
	#if SUPPORT_EXTENDED_CANID
		msg->flags.extended = tmp & 0x01;
	#else
		if (tmp & 0x01) {
			// Nachrichten mit extended ID verwerfen
			SET(MCP2515_CS);
 366:	2a 9a       	sbi	0x05, 2	; 5
			#else
			if (_bit_is_set(status, 6))
			#endif
				mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
			else
				mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	62 e0       	ldi	r22, 0x02	; 2
 36c:	8c e2       	ldi	r24, 0x2C	; 44
 36e:	0e 94 cb 00 	call	0x196	; 0x196 <mcp2515_bit_modify>
 372:	1c c0       	rjmp	.+56     	; 0x3ac <can_get_message+0xdc>
			// Error: no message available
			return 0;
		}
	#endif
	
	RESET(MCP2515_CS);
 374:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(addr);
 376:	84 e9       	ldi	r24, 0x94	; 148
 378:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	
	// CAN ID auslesen und ueberpruefen
	uint8_t tmp = mcp2515_read_id(&msg->id);
 37c:	c6 01       	movw	r24, r12
 37e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <mcp2515_read_id>
	#if SUPPORT_EXTENDED_CANID
		msg->flags.extended = tmp & 0x01;
	#else
		if (tmp & 0x01) {
 382:	80 fd       	sbrc	r24, 0
 384:	f0 cf       	rjmp	.-32     	; 0x366 <can_get_message+0x96>
 386:	b9 cf       	rjmp	.-142    	; 0x2fa <can_get_message+0x2a>
			// Nachrichten mit extended ID verwerfen
			SET(MCP2515_CS);
 388:	2a 9a       	sbi	0x05, 2	; 5
			#ifdef	RXnBF_FUNKTION
			if (!IS_SET(MCP2515_RX0BF))
			#else
			if (_bit_is_set(status, 6))
			#endif
				mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	8c e2       	ldi	r24, 0x2C	; 44
 390:	0e 94 cb 00 	call	0x196	; 0x196 <mcp2515_bit_modify>
			else
				mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
			
			return 0;
 394:	d0 e0       	ldi	r29, 0x00	; 0
 396:	0a c0       	rjmp	.+20     	; 0x3ac <can_get_message+0xdc>
			// Error: no message available
			return 0;
		}
	#endif
	
	RESET(MCP2515_CS);
 398:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(addr);
 39a:	80 e9       	ldi	r24, 0x90	; 144
 39c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	
	// CAN ID auslesen und ueberpruefen
	uint8_t tmp = mcp2515_read_id(&msg->id);
 3a0:	c6 01       	movw	r24, r12
 3a2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <mcp2515_read_id>
	#if SUPPORT_EXTENDED_CANID
		msg->flags.extended = tmp & 0x01;
	#else
		if (tmp & 0x01) {
 3a6:	80 fd       	sbrc	r24, 0
 3a8:	ef cf       	rjmp	.-34     	; 0x388 <can_get_message+0xb8>
 3aa:	a7 cf       	rjmp	.-178    	; 0x2fa <can_get_message+0x2a>
	#ifdef RXnBF_FUNKTION
		return 1;
	#else
		return (status & 0x07) + 1;
	#endif
}
 3ac:	8d 2f       	mov	r24, r29
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	ff 90       	pop	r15
 3b8:	ef 90       	pop	r14
 3ba:	df 90       	pop	r13
 3bc:	cf 90       	pop	r12
 3be:	08 95       	ret

000003c0 <mcp2515_read_id>:
}

#else

uint8_t mcp2515_read_id(uint16_t *id)
{
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	ec 01       	movw	r28, r24
	uint8_t first;
	uint8_t tmp;
	
	first = spi_putc(0xff);
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
 3ce:	18 2f       	mov	r17, r24
	tmp   = spi_putc(0xff);
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
 3d6:	48 2f       	mov	r20, r24
	
	if (tmp & (1 << IDE)) {
 3d8:	83 ff       	sbrs	r24, 3
 3da:	08 c0       	rjmp	.+16     	; 0x3ec <mcp2515_read_id+0x2c>
		spi_putc(0xff);
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
		spi_putc(0xff);
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
		
		return 1;			// extended-frame
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	21 c0       	rjmp	.+66     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
}

#else

extern __attribute__ ((gnu_inline)) inline void spi_start(uint8_t data) {
	SPDR = data;
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	8e bd       	out	0x2e, r24	; 46
	}
	else {
		spi_start(0xff);
		
		*id = (uint16_t) first << 3;
 3f0:	21 2f       	mov	r18, r17
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
 3f8:	22 0f       	add	r18, r18
 3fa:	33 1f       	adc	r19, r19
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	39 83       	std	Y+1, r19	; 0x01
 402:	28 83       	st	Y, r18
}

extern __attribute__ ((gnu_inline)) inline uint8_t spi_wait(void) {
	// warten bis der vorherige Werte geschrieben wurde
	while(!(SPSR & (1<<SPIF)))
 404:	0d b4       	in	r0, 0x2d	; 45
 406:	07 fe       	sbrs	r0, 7
 408:	fd cf       	rjmp	.-6      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
		;
	
	return SPDR;
 40a:	8e b5       	in	r24, 0x2e	; 46
}

#else

extern __attribute__ ((gnu_inline)) inline void spi_start(uint8_t data) {
	SPDR = data;
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	8e bd       	out	0x2e, r24	; 46
		
		spi_wait();
		spi_start(0xff);
		
		*((uint8_t *) id) |= tmp >> 5;
 410:	88 81       	ld	r24, Y
 412:	94 2f       	mov	r25, r20
 414:	92 95       	swap	r25
 416:	96 95       	lsr	r25
 418:	97 70       	andi	r25, 0x07	; 7
 41a:	98 2b       	or	r25, r24
 41c:	98 83       	st	Y, r25
}

extern __attribute__ ((gnu_inline)) inline uint8_t spi_wait(void) {
	// warten bis der vorherige Werte geschrieben wurde
	while(!(SPSR & (1<<SPIF)))
 41e:	0d b4       	in	r0, 0x2d	; 45
 420:	07 fe       	sbrs	r0, 7
 422:	fd cf       	rjmp	.-6      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
		;
	
	return SPDR;
 424:	8e b5       	in	r24, 0x2e	; 46
		
		spi_wait();
		
		if (tmp & (1 << SRR))
 426:	84 2f       	mov	r24, r20
 428:	80 71       	andi	r24, 0x10	; 16
 42a:	44 fd       	sbrc	r20, 4
			return 2;		// RTR-frame
 42c:	82 e0       	ldi	r24, 0x02	; 2
		else
			return 0;		// normal-frame
	}
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	08 95       	ret

00000436 <can_send_message>:

#include <util/delay.h>

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(const can_t *msg)
{
 436:	df 92       	push	r13
 438:	ef 92       	push	r14
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	7c 01       	movw	r14, r24
	// Status des MCP2515 auslesen
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
 446:	80 ea       	ldi	r24, 0xA0	; 160
 448:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <mcp2515_read_status>
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (_bit_is_clear(status, 2)) {
 44c:	82 ff       	sbrs	r24, 2
 44e:	08 c0       	rjmp	.+16     	; 0x460 <can_send_message+0x2a>
		address = 0x00;
	}
	else if (_bit_is_clear(status, 4)) {
 450:	84 ff       	sbrs	r24, 4
 452:	08 c0       	rjmp	.+16     	; 0x464 <can_send_message+0x2e>
		address = 0x02;
	} 
	else if (_bit_is_clear(status, 6)) {
 454:	86 fd       	sbrc	r24, 6
 456:	3e c0       	rjmp	.+124    	; 0x4d4 <can_send_message+0x9e>
		address = 0x04;
 458:	68 94       	set
 45a:	dd 24       	eor	r13, r13
 45c:	d2 f8       	bld	r13, 2
 45e:	05 c0       	rjmp	.+10     	; 0x46a <can_send_message+0x34>
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (_bit_is_clear(status, 2)) {
		address = 0x00;
 460:	d1 2c       	mov	r13, r1
 462:	03 c0       	rjmp	.+6      	; 0x46a <can_send_message+0x34>
	}
	else if (_bit_is_clear(status, 4)) {
		address = 0x02;
 464:	68 94       	set
 466:	dd 24       	eor	r13, r13
 468:	d1 f8       	bld	r13, 1
		// Alle Puffer sind belegt,
		// Nachricht kann nicht verschickt werden
		return 0;
	}
	
	RESET(MCP2515_CS);
 46a:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_WRITE_TX | address);
 46c:	8d 2d       	mov	r24, r13
 46e:	80 64       	ori	r24, 0x40	; 64
 470:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	#if SUPPORT_EXTENDED_CANID
		mcp2515_write_id(&msg->id, msg->flags.extended);
	#else
		mcp2515_write_id(&msg->id);
 474:	c7 01       	movw	r24, r14
 476:	0e 94 d6 02 	call	0x5ac	; 0x5ac <mcp2515_write_id>
	#endif
	uint8_t length = msg->length & 0x0f;
 47a:	f7 01       	movw	r30, r14
 47c:	13 81       	ldd	r17, Z+3	; 0x03
 47e:	1f 70       	andi	r17, 0x0F	; 15
	
	// Ist die Nachricht ein "Remote Transmit Request" ?
	if (msg->flags.rtr)
 480:	82 81       	ldd	r24, Z+2	; 0x02
 482:	80 ff       	sbrs	r24, 0
 484:	05 c0       	rjmp	.+10     	; 0x490 <can_send_message+0x5a>
	{
		// Ein RTR hat zwar eine Laenge,
		// enthaelt aber keine Daten
		
		// Nachrichten Laenge + RTR einstellen
		spi_putc((1<<RTR) | length);
 486:	81 2f       	mov	r24, r17
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
 48e:	14 c0       	rjmp	.+40     	; 0x4b8 <can_send_message+0x82>
	}
	else
	{
		// Nachrichten Laenge einstellen
		spi_putc(length);
 490:	81 2f       	mov	r24, r17
 492:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
		
		// Daten
		for (uint8_t i=0;i<length;i++) {
 496:	11 23       	and	r17, r17
 498:	79 f0       	breq	.+30     	; 0x4b8 <can_send_message+0x82>
 49a:	e7 01       	movw	r28, r14
 49c:	24 96       	adiw	r28, 0x04	; 4
 49e:	11 50       	subi	r17, 0x01	; 1
 4a0:	01 2f       	mov	r16, r17
 4a2:	10 e0       	ldi	r17, 0x00	; 0
 4a4:	0b 5f       	subi	r16, 0xFB	; 251
 4a6:	1f 4f       	sbci	r17, 0xFF	; 255
 4a8:	0e 0d       	add	r16, r14
 4aa:	1f 1d       	adc	r17, r15
			spi_putc(msg->data[i]);
 4ac:	89 91       	ld	r24, Y+
 4ae:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	{
		// Nachrichten Laenge einstellen
		spi_putc(length);
		
		// Daten
		for (uint8_t i=0;i<length;i++) {
 4b2:	c0 17       	cp	r28, r16
 4b4:	d1 07       	cpc	r29, r17
 4b6:	d1 f7       	brne	.-12     	; 0x4ac <can_send_message+0x76>
			spi_putc(msg->data[i]);
		}
	}
	SET(MCP2515_CS);
 4b8:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ba:	00 00       	nop
	_delay_us(1);
	
	// CAN Nachricht verschicken
	// die letzten drei Bit im RTS Kommando geben an welcher
	// Puffer gesendet werden soll.
	RESET(MCP2515_CS);
 4bc:	2a 98       	cbi	0x05, 2	; 5
	address = (address == 0) ? 1 : address;
 4be:	d1 10       	cpse	r13, r1
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <can_send_message+0x90>
 4c2:	dd 24       	eor	r13, r13
 4c4:	d3 94       	inc	r13
	spi_putc(SPI_RTS | address);
 4c6:	8d 2d       	mov	r24, r13
 4c8:	80 68       	ori	r24, 0x80	; 128
 4ca:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	SET(MCP2515_CS);
 4ce:	2a 9a       	sbi	0x05, 2	; 5
	
	CAN_INDICATE_TX_TRAFFIC_FUNCTION;
	
	return address;
 4d0:	8d 2d       	mov	r24, r13
 4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <can_send_message+0xa0>
		address = 0x04;
	}
	else {
		// Alle Puffer sind belegt,
		// Nachricht kann nicht verschickt werden
		return 0;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
	SET(MCP2515_CS);
	
	CAN_INDICATE_TX_TRAFFIC_FUNCTION;
	
	return address;
}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	df 90       	pop	r13
 4e4:	08 95       	ret

000004e6 <can_set_mode>:
#ifdef	SUPPORT_FOR_MCP2515__

// ----------------------------------------------------------------------------
void
mcp2515_set_mode(can_mode_t mode)
{
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
	uint8_t reg = 0;
	
	if (mode == LISTEN_ONLY_MODE) {
 4ea:	88 23       	and	r24, r24
 4ec:	31 f0       	breq	.+12     	; 0x4fa <can_set_mode+0x14>
		reg = (1<<REQOP1)|(1<<REQOP0);
	}
	else if (mode == LOOPBACK_MODE) {
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	31 f0       	breq	.+12     	; 0x4fe <can_set_mode+0x18>
		reg = (1<<REQOP1);
	}
	else if (mode == SLEEP_MODE) {
 4f2:	83 30       	cpi	r24, 0x03	; 3
 4f4:	31 f4       	brne	.+12     	; 0x502 <can_set_mode+0x1c>
		reg = (1<<REQOP0);
 4f6:	c0 e2       	ldi	r28, 0x20	; 32
 4f8:	05 c0       	rjmp	.+10     	; 0x504 <can_set_mode+0x1e>
mcp2515_set_mode(can_mode_t mode)
{
	uint8_t reg = 0;
	
	if (mode == LISTEN_ONLY_MODE) {
		reg = (1<<REQOP1)|(1<<REQOP0);
 4fa:	c0 e6       	ldi	r28, 0x60	; 96
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <can_set_mode+0x1e>
	}
	else if (mode == LOOPBACK_MODE) {
		reg = (1<<REQOP1);
 4fe:	c0 e4       	ldi	r28, 0x40	; 64
 500:	01 c0       	rjmp	.+2      	; 0x504 <can_set_mode+0x1e>

// ----------------------------------------------------------------------------
void
mcp2515_set_mode(can_mode_t mode)
{
	uint8_t reg = 0;
 502:	c0 e0       	ldi	r28, 0x00	; 0
	else if (mode == SLEEP_MODE) {
		reg = (1<<REQOP0);
	}
		
	// set the new mode
	mcp2515_bit_modify(CANCTRL, (1<<REQOP2)|(1<<REQOP1)|(1<<REQOP0), reg);
 504:	4c 2f       	mov	r20, r28
 506:	60 ee       	ldi	r22, 0xE0	; 224
 508:	8f e0       	ldi	r24, 0x0F	; 15
 50a:	0e 94 cb 00 	call	0x196	; 0x196 <mcp2515_bit_modify>
	while ((mcp2515_read_register(CANSTAT) & 0xe0) != reg) {
 50e:	d0 e0       	ldi	r29, 0x00	; 0
 510:	8e e0       	ldi	r24, 0x0E	; 14
 512:	0e 94 bc 00 	call	0x178	; 0x178 <mcp2515_read_register>
 516:	80 7e       	andi	r24, 0xE0	; 224
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	8c 17       	cp	r24, r28
 51c:	9d 07       	cpc	r25, r29
 51e:	c1 f7       	brne	.-16     	; 0x510 <can_set_mode+0x2a>
		// wait for the new mode to become active
	}
}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <can_static_filter>:

// ----------------------------------------------------------------------------
// Filter setzen

void mcp2515_static_filter(const uint8_t *filter)
{
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	8c 01       	movw	r16, r24
	// change to configuration mode
	mcp2515_bit_modify(CANCTRL, 0xe0, (1<<REQOP2));
 532:	40 e8       	ldi	r20, 0x80	; 128
 534:	60 ee       	ldi	r22, 0xE0	; 224
 536:	8f e0       	ldi	r24, 0x0F	; 15
 538:	0e 94 cb 00 	call	0x196	; 0x196 <mcp2515_bit_modify>
	while ((mcp2515_read_register(CANSTAT) & 0xe0) != (1<<REQOP2))
 53c:	8e e0       	ldi	r24, 0x0E	; 14
 53e:	0e 94 bc 00 	call	0x178	; 0x178 <mcp2515_read_register>
 542:	80 7e       	andi	r24, 0xE0	; 224
 544:	80 38       	cpi	r24, 0x80	; 128
 546:	d1 f7       	brne	.-12     	; 0x53c <can_static_filter+0x16>
		;
	
	mcp2515_write_register(RXB0CTRL, (1<<BUKT));
 548:	64 e0       	ldi	r22, 0x04	; 4
 54a:	80 e6       	ldi	r24, 0x60	; 96
 54c:	0e 94 aa 00 	call	0x154	; 0x154 <mcp2515_write_register>
	mcp2515_write_register(RXB1CTRL, 0);
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	80 e7       	ldi	r24, 0x70	; 112
 554:	0e 94 aa 00 	call	0x154	; 0x154 <mcp2515_write_register>
    
	uint8_t i, j;
	for (i = 0; i < 0x30; i += 0x10)
 558:	d0 e0       	ldi	r29, 0x00	; 0
	{
		RESET(MCP2515_CS);
		spi_putc(SPI_WRITE);
		spi_putc(i);
		
		for (j = 0; j < 12; j++) 
 55a:	f1 2c       	mov	r15, r1
	mcp2515_write_register(RXB1CTRL, 0);
    
	uint8_t i, j;
	for (i = 0; i < 0x30; i += 0x10)
	{
		RESET(MCP2515_CS);
 55c:	2a 98       	cbi	0x05, 2	; 5
		spi_putc(SPI_WRITE);
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
		spi_putc(i);
 564:	8d 2f       	mov	r24, r29
 566:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
		
		for (j = 0; j < 12; j++) 
 56a:	cf 2d       	mov	r28, r15
		{
			if (i == 0x20 && j >= 0x08)
 56c:	d0 32       	cpi	r29, 0x20	; 32
 56e:	11 f4       	brne	.+4      	; 0x574 <can_static_filter+0x4e>
 570:	c8 30       	cpi	r28, 0x08	; 8
 572:	a0 f4       	brcc	.+40     	; 0x59c <can_static_filter+0x76>
				break;
			
			spi_putc(pgm_read_byte(filter++));
 574:	0f 5f       	subi	r16, 0xFF	; 255
 576:	1f 4f       	sbci	r17, 0xFF	; 255
 578:	f8 01       	movw	r30, r16
 57a:	31 97       	sbiw	r30, 0x01	; 1
 57c:	84 91       	lpm	r24, Z
 57e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	{
		RESET(MCP2515_CS);
		spi_putc(SPI_WRITE);
		spi_putc(i);
		
		for (j = 0; j < 12; j++) 
 582:	cf 5f       	subi	r28, 0xFF	; 255
 584:	cc 30       	cpi	r28, 0x0C	; 12
 586:	91 f7       	brne	.-28     	; 0x56c <can_static_filter+0x46>
			if (i == 0x20 && j >= 0x08)
				break;
			
			spi_putc(pgm_read_byte(filter++));
		}
		SET(MCP2515_CS);
 588:	2a 9a       	sbi	0x05, 2	; 5
	
	mcp2515_write_register(RXB0CTRL, (1<<BUKT));
	mcp2515_write_register(RXB1CTRL, 0);
    
	uint8_t i, j;
	for (i = 0; i < 0x30; i += 0x10)
 58a:	d0 5f       	subi	r29, 0xF0	; 240
 58c:	d0 33       	cpi	r29, 0x30	; 48
 58e:	31 f7       	brne	.-52     	; 0x55c <can_static_filter+0x36>
			spi_putc(pgm_read_byte(filter++));
		}
		SET(MCP2515_CS);
	}
	
	mcp2515_bit_modify(CANCTRL, 0xe0, 0);
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	60 ee       	ldi	r22, 0xE0	; 224
 594:	8f e0       	ldi	r24, 0x0F	; 15
 596:	0e 94 cb 00 	call	0x196	; 0x196 <mcp2515_bit_modify>
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <can_static_filter+0x7a>
			if (i == 0x20 && j >= 0x08)
				break;
			
			spi_putc(pgm_read_byte(filter++));
		}
		SET(MCP2515_CS);
 59c:	2a 9a       	sbi	0x05, 2	; 5
 59e:	f8 cf       	rjmp	.-16     	; 0x590 <can_static_filter+0x6a>
	}
	
	mcp2515_bit_modify(CANCTRL, 0xe0, 0);
}
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	ff 90       	pop	r15
 5aa:	08 95       	ret

000005ac <mcp2515_write_id>:

void mcp2515_write_id(const uint16_t *id)
{
	uint8_t tmp;
	
	spi_start(*id >> 3);
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 81       	ld	r18, Z
 5b0:	31 81       	ldd	r19, Z+1	; 0x01
 5b2:	36 95       	lsr	r19
 5b4:	27 95       	ror	r18
 5b6:	36 95       	lsr	r19
 5b8:	27 95       	ror	r18
 5ba:	36 95       	lsr	r19
 5bc:	27 95       	ror	r18
}

#else

static void spi_start(uint8_t data) {
	SPDR = data;
 5be:	2e bd       	out	0x2e, r18	; 46
void mcp2515_write_id(const uint16_t *id)
{
	uint8_t tmp;
	
	spi_start(*id >> 3);
	tmp = *((uint8_t *) id) << 5;
 5c0:	80 81       	ld	r24, Z
 5c2:	82 95       	swap	r24
 5c4:	88 0f       	add	r24, r24
 5c6:	80 7e       	andi	r24, 0xE0	; 224
	SPDR = data;
}

static uint8_t spi_wait(void) {
	// warten bis der vorherige Werte geschrieben wurde
	while(!(SPSR & (1<<SPIF)))
 5c8:	0d b4       	in	r0, 0x2d	; 45
 5ca:	07 fe       	sbrs	r0, 7
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <mcp2515_write_id+0x1c>
		;
	
	return SPDR;
 5ce:	9e b5       	in	r25, 0x2e	; 46
	
	spi_start(*id >> 3);
	tmp = *((uint8_t *) id) << 5;
	spi_wait();
	
	spi_putc(tmp);
 5d0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	spi_putc(0);
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
	spi_putc(0);
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <spi_putc>
 5e0:	08 95       	ret

000005e2 <mcp2515_spi_init>:
// ----------------------------------------------------------------------------
void mcp2515_spi_init(void)
{
	#ifndef USE_SOFTWARE_SPI
		// Aktivieren des SPI Master Interfaces
		SPCR = (1<<SPE)|(1<<MSTR) | R_SPCR;
 5e2:	81 e5       	ldi	r24, 0x51	; 81
 5e4:	8c bd       	out	0x2c, r24	; 44
		SPSR = R_SPSR;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	8d bd       	out	0x2d, r24	; 45
 5ea:	08 95       	ret

000005ec <spi_putc>:
	return data_in;
	
	#else
	
	// put byte in send-buffer
	SPDR = data;
 5ec:	8e bd       	out	0x2e, r24	; 46
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
 5ee:	0d b4       	in	r0, 0x2d	; 45
 5f0:	07 fe       	sbrs	r0, 7
 5f2:	fd cf       	rjmp	.-6      	; 0x5ee <spi_putc+0x2>
		;
	
	return SPDR;
 5f4:	8e b5       	in	r24, 0x2e	; 46
	
	#endif
}
 5f6:	08 95       	ret

000005f8 <_exit>:
 5f8:	f8 94       	cli

000005fa <__stop_program>:
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <__stop_program>

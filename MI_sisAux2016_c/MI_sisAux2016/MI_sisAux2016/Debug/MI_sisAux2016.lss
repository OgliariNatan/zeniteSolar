
MI_sisAux2016.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000086c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000718  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001ef  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003762  00000000  00000000  00001237  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d47  00000000  00000000  00004999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c35  00000000  00000000  000056e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000de0  00000000  00000000  00008318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000027fb  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d87  00000000  00000000  0000b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000648  00000000  00000000  0000d67a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

00000068 <__trampolines_end>:
	...

00000088 <_mcp2515_cnf>:
  88:	04 b6 e7 04 b6 d3 04 b6 c7 04 b6 c3 02 90 07 03     ................
  98:	ac 81 03 ac 80 02 90 00                             ........

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	d8 e0       	ldi	r29, 0x08	; 8
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
  ac:	11 e0       	ldi	r17, 0x01	; 1
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	ec e6       	ldi	r30, 0x6C	; 108
  b4:	f8 e0       	ldi	r31, 0x08	; 8
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	a0 e0       	ldi	r26, 0x00	; 0
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a0 30       	cpi	r26, 0x00	; 0
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	0e 94 c2 03 	call	0x784	; 0x784 <main>
  d6:	0c 94 34 04 	jmp	0x868	; 0x868 <_exit>

000000da <__bad_interrupt>:
  da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;
	
	RESET(MCP2515_CS);
  de:	c4 98       	cbi	0x18, 4	; 24
	
	spi_putc(type);
  e0:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	data = spi_putc(0xff);
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	
	SET(MCP2515_CS);
  ea:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
}
  ec:	08 95       	ret

000000ee <mcp2515_bit_modify>:
	return data;
}

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	18 2f       	mov	r17, r24
  f6:	06 2f       	mov	r16, r22
  f8:	f4 2e       	mov	r15, r20
	RESET(MCP2515_CS);
  fa:	c4 98       	cbi	0x18, 4	; 24
	
	spi_putc(SPI_BIT_MODIFY);
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	spi_putc(adress);
 102:	81 2f       	mov	r24, r17
 104:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	spi_putc(mask);
 108:	80 2f       	mov	r24, r16
 10a:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	spi_putc(data);
 10e:	8f 2d       	mov	r24, r15
 110:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	
	SET(MCP2515_CS);
 114:	c4 9a       	sbi	0x18, 4	; 24
}
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	ff 90       	pop	r15
 11c:	08 95       	ret

0000011e <mcp2515_read_register>:
	SET(MCP2515_CS);
}

// -------------------------------------------------------------------------
uint8_t mcp2515_read_register(uint8_t adress)
{
 11e:	1f 93       	push	r17
 120:	18 2f       	mov	r17, r24
	uint8_t data;
	
	RESET(MCP2515_CS);
 122:	c4 98       	cbi	0x18, 4	; 24
	
	spi_putc(SPI_READ);
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	spi_putc(adress);
 12a:	81 2f       	mov	r24, r17
 12c:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	
	data = spi_putc(0xff);	
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	
	SET(MCP2515_CS);
 136:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
}
 138:	1f 91       	pop	r17
 13a:	08 95       	ret

0000013c <mcp2515_write_register>:
	#error	invaild value of MCP2515_CLKOUT_PRESCALER
#endif

// -------------------------------------------------------------------------
void mcp2515_write_register( uint8_t adress, uint8_t data )
{
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	18 2f       	mov	r17, r24
 142:	06 2f       	mov	r16, r22
	RESET(MCP2515_CS);
 144:	c4 98       	cbi	0x18, 4	; 24
	
	spi_putc(SPI_WRITE);
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	spi_putc(adress);
 14c:	81 2f       	mov	r24, r17
 14e:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	spi_putc(data);
 152:	80 2f       	mov	r24, r16
 154:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	
	SET(MCP2515_CS);
 158:	c4 9a       	sbi	0x18, 4	; 24
}
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <can_init>:
	}
};

// -------------------------------------------------------------------------
bool mcp2515_init(can_bitrate_t bitrate)
{
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	18 2f       	mov	r17, r24
	if (bitrate >= 8)
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	08 f0       	brcs	.+2      	; 0x170 <can_init+0x10>
 16e:	55 c0       	rjmp	.+170    	; 0x21a <can_init+0xba>
		return false;
	
	SET(MCP2515_CS);
 170:	c4 9a       	sbi	0x18, 4	; 24
	SET_OUTPUT(MCP2515_CS);
 172:	bc 9a       	sbi	0x17, 4	; 23
	
	// Aktivieren der Pins fuer das SPI Interface
	RESET(P_SCK);
 174:	c7 98       	cbi	0x18, 7	; 24
	RESET(P_MOSI);
 176:	c5 98       	cbi	0x18, 5	; 24
	RESET(P_MISO);
 178:	c6 98       	cbi	0x18, 6	; 24
	
	SET_OUTPUT(P_SCK);
 17a:	bf 9a       	sbi	0x17, 7	; 23
	SET_OUTPUT(P_MOSI);
 17c:	bd 9a       	sbi	0x17, 5	; 23
	SET_INPUT(P_MISO);
 17e:	be 98       	cbi	0x17, 6	; 23
	
	// SPI Einstellung setzen
	mcp2515_spi_init();
 180:	0e 94 89 02 	call	0x512	; 0x512 <mcp2515_spi_init>
	
	// MCP2515 per Software Reset zuruecksetzten,
	// danach ist er automatisch im Konfigurations Modus
	RESET(MCP2515_CS);
 184:	c4 98       	cbi	0x18, 4	; 24
	spi_putc(SPI_RESET);
 186:	80 ec       	ldi	r24, 0xC0	; 192
 188:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18c:	80 ea       	ldi	r24, 0xA0	; 160
 18e:	9f e0       	ldi	r25, 0x0F	; 15
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <can_init+0x30>
	
	_delay_ms(1);
	
	SET(MCP2515_CS);
 194:	c4 9a       	sbi	0x18, 4	; 24
 196:	80 e4       	ldi	r24, 0x40	; 64
 198:	9c e9       	ldi	r25, 0x9C	; 156
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <can_init+0x3a>
	
	// ein bisschen warten bis der MCP2515 sich neu gestartet hat
	_delay_ms(10);
	
	// CNF1..3 Register laden (Bittiming)
	RESET(MCP2515_CS);
 19e:	c4 98       	cbi	0x18, 4	; 24
	spi_putc(SPI_WRITE);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	spi_putc(CNF3);
 1a6:	88 e2       	ldi	r24, 0x28	; 40
 1a8:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	for (uint8_t i=0; i<3 ;i++ ) {
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
 1ac:	e3 e0       	ldi	r30, 0x03	; 3
 1ae:	1e 9f       	mul	r17, r30
 1b0:	e0 01       	movw	r28, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	fe 01       	movw	r30, r28
 1b6:	e8 57       	subi	r30, 0x78	; 120
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	e4 91       	lpm	r30, Z
 1bc:	8e 2f       	mov	r24, r30
 1be:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
 1c2:	fe 01       	movw	r30, r28
 1c4:	e7 57       	subi	r30, 0x77	; 119
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	04 91       	lpm	r16, Z
 1ca:	80 2f       	mov	r24, r16
 1cc:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
 1d0:	c6 57       	subi	r28, 0x76	; 118
 1d2:	df 4f       	sbci	r29, 0xFF	; 255
 1d4:	fe 01       	movw	r30, r28
 1d6:	84 91       	lpm	r24, Z
 1d8:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	}
	// aktivieren/deaktivieren der Interrupts
	spi_putc(MCP2515_INTERRUPTS);
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	SET(MCP2515_CS);
 1e2:	c4 9a       	sbi	0x18, 4	; 24
	
	// TXnRTS Bits als Inputs schalten
	mcp2515_write_register(TXRTSCTRL, 0);
 1e4:	8d e0       	ldi	r24, 0x0D	; 13
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	0e 94 9e 00 	call	0x13c	; 0x13c <mcp2515_write_register>
	
	#if defined(MCP2515_INT)
		SET_INPUT(MCP2515_INT);
 1ec:	ba 98       	cbi	0x17, 2	; 23
		SET(MCP2515_INT);
 1ee:	c2 9a       	sbi	0x18, 2	; 24
			// activate the pin RX1BF as GPIO which is connected 
			// to RS of MCP2551 and set it to 0
			mcp2515_write_register(BFPCTRL, (1<<B1BFE));
		#else
			// Deaktivieren der Pins RXnBF Pins (High Impedance State)
			mcp2515_write_register(BFPCTRL, 0);
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	0e 94 9e 00 	call	0x13c	; 0x13c <mcp2515_write_register>
	#endif
	
	// Testen ob das auf die beschreibenen Register zugegriffen werden kann
	// (=> ist der Chip ueberhaupt ansprechbar?)
	bool error = false;
	if (mcp2515_read_register(CNF2) != pgm_read_byte(&_mcp2515_cnf[bitrate][1])) {
 1f8:	89 e2       	ldi	r24, 0x29	; 41
 1fa:	0e 94 8f 00 	call	0x11e	; 0x11e <mcp2515_read_register>
 1fe:	18 2f       	mov	r17, r24
		error = true;
	}
	
	// Device zurueck in den normalen Modus versetzten
	// und aktivieren/deaktivieren des Clkout-Pins
	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
 200:	8f e0       	ldi	r24, 0x0F	; 15
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	0e 94 9e 00 	call	0x13c	; 0x13c <mcp2515_write_register>
	
	if (error) {
 208:	10 17       	cp	r17, r16
 20a:	39 f4       	brne	.+14     	; 0x21a <can_init+0xba>
		return false;
	}
	else
	{
		while ((mcp2515_read_register(CANSTAT) & 0xe0) != 0) {
 20c:	8e e0       	ldi	r24, 0x0E	; 14
 20e:	0e 94 8f 00 	call	0x11e	; 0x11e <mcp2515_read_register>
 212:	80 7e       	andi	r24, 0xE0	; 224
 214:	d9 f7       	brne	.-10     	; 0x20c <can_init+0xac>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	01 c0       	rjmp	.+2      	; 0x21c <can_init+0xbc>
 21a:	80 e0       	ldi	r24, 0x00	; 0
			// warten bis der neue Modus uebernommen wurde
		}
		
		return true;
	}
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <can_check_message>:
// check if there are any new messages waiting

bool mcp2515_check_message(void)
{
	#if defined(MCP2515_INT)
		return ((!IS_SET(MCP2515_INT)) ? true : false);
 226:	86 b3       	in	r24, 0x16	; 22
 228:	86 95       	lsr	r24
 22a:	86 95       	lsr	r24
 22c:	80 95       	com	r24
				return false;
		#else
			return ((mcp2515_read_status(SPI_RX_STATUS) & 0xC0) ? true : false);
		#endif
	#endif
}
 22e:	81 70       	andi	r24, 0x01	; 1
 230:	08 95       	ret

00000232 <can_check_free_buffer>:
// ----------------------------------------------------------------------------
// check if there is a free buffer to send messages

bool mcp2515_check_free_buffer(void)
{
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
 232:	80 ea       	ldi	r24, 0xA0	; 160
 234:	0e 94 6f 00 	call	0xde	; 0xde <mcp2515_read_status>
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	84 75       	andi	r24, 0x54	; 84
 23c:	84 35       	cpi	r24, 0x54	; 84
 23e:	09 f0       	breq	.+2      	; 0x242 <can_check_free_buffer+0x10>
 240:	91 e0       	ldi	r25, 0x01	; 1
	
	if ((status & 0x54) == 0x54)
		return false;		// all buffers used
	else
		return true;
}
 242:	89 2f       	mov	r24, r25
 244:	08 95       	ret

00000246 <can_get_message>:
#ifdef	SUPPORT_FOR_MCP2515__

// ----------------------------------------------------------------------------

uint8_t mcp2515_get_message(can_t *msg)
{
 246:	af 92       	push	r10
 248:	bf 92       	push	r11
 24a:	df 92       	push	r13
 24c:	ef 92       	push	r14
 24e:	ff 92       	push	r15
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	7c 01       	movw	r14, r24
			addr = SPI_READ_RX | 0x04;
		else
			return 0;
	#else
		// read status
		uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
 25a:	80 eb       	ldi	r24, 0xB0	; 176
 25c:	0e 94 6f 00 	call	0xde	; 0xde <mcp2515_read_status>
 260:	d8 2e       	mov	r13, r24
		
		if (_bit_is_set(status,6)) {
 262:	c8 2f       	mov	r28, r24
 264:	d0 e0       	ldi	r29, 0x00	; 0
 266:	20 e4       	ldi	r18, 0x40	; 64
 268:	a2 2e       	mov	r10, r18
 26a:	b1 2c       	mov	r11, r1
 26c:	ac 22       	and	r10, r28
 26e:	bd 22       	and	r11, r29
 270:	86 ff       	sbrs	r24, 6
 272:	02 c0       	rjmp	.+4      	; 0x278 <can_get_message+0x32>
 274:	80 e9       	ldi	r24, 0x90	; 144
 276:	03 c0       	rjmp	.+6      	; 0x27e <can_get_message+0x38>
			// message in buffer 0
			addr = SPI_READ_RX;
		}
		else if (_bit_is_set(status,7)) {
 278:	87 ff       	sbrs	r24, 7
 27a:	11 c0       	rjmp	.+34     	; 0x29e <can_get_message+0x58>
 27c:	84 e9       	ldi	r24, 0x94	; 148
			// Error: no message available
			return 0;
		}
	#endif
	
	RESET(MCP2515_CS);
 27e:	c4 98       	cbi	0x18, 4	; 24
	spi_putc(addr);
 280:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	
	// CAN ID auslesen und ueberpruefen
	uint8_t tmp = mcp2515_read_id(&msg->id);
 284:	c7 01       	movw	r24, r14
 286:	0e 94 2c 02 	call	0x458	; 0x458 <mcp2515_read_id>
	#if SUPPORT_EXTENDED_CANID
		msg->flags.extended = tmp & 0x01;
	#else
		if (tmp & 0x01) {
 28a:	80 ff       	sbrs	r24, 0
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <can_get_message+0x62>
			// Nachrichten mit extended ID verwerfen
			SET(MCP2515_CS);
 28e:	c4 9a       	sbi	0x18, 4	; 24
			#ifdef	RXnBF_FUNKTION
			if (!IS_SET(MCP2515_RX0BF))
			#else
			if (_bit_is_set(status, 6))
 290:	ab 28       	or	r10, r11
 292:	39 f0       	breq	.+14     	; 0x2a2 <can_get_message+0x5c>
			#endif
				mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 294:	8c e2       	ldi	r24, 0x2C	; 44
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	0e 94 77 00 	call	0xee	; 0xee <mcp2515_bit_modify>
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	2f c0       	rjmp	.+94     	; 0x300 <can_get_message+0xba>
			else
				mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 2a2:	8c e2       	ldi	r24, 0x2C	; 44
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	f8 cf       	rjmp	.-16     	; 0x298 <can_get_message+0x52>
			return 0;
		}
	#endif
	
	// read DLC
	uint8_t length = spi_putc(0xff);
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
		if (!(tmp & 0x01))
			msg->flags.rtr = (tmp & 0x02) ? 1 : 0;
		else
			msg->flags.rtr = (length & (1<<RTR)) ? 1 : 0;
	#else
		msg->flags.rtr = (_bit_is_set(status, 3)) ? 1 : 0;
 2ae:	93 e0       	ldi	r25, 0x03	; 3
 2b0:	d6 95       	lsr	r29
 2b2:	c7 95       	ror	r28
 2b4:	9a 95       	dec	r25
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <can_get_message+0x6a>
 2b8:	ae 01       	movw	r20, r28
 2ba:	41 70       	andi	r20, 0x01	; 1
 2bc:	f7 01       	movw	r30, r14
 2be:	92 81       	ldd	r25, Z+2	; 0x02
 2c0:	9e 7f       	andi	r25, 0xFE	; 254
 2c2:	94 2b       	or	r25, r20
 2c4:	92 83       	std	Z+2, r25	; 0x02
	#endif
	
	length &= 0x0f;
 2c6:	08 2f       	mov	r16, r24
 2c8:	0f 70       	andi	r16, 0x0F	; 15
	msg->length = length;
 2ca:	03 83       	std	Z+3, r16	; 0x03
 2cc:	10 e0       	ldi	r17, 0x00	; 0
 2ce:	08 c0       	rjmp	.+16     	; 0x2e0 <can_get_message+0x9a>
	// read data
	for (uint8_t i=0;i<length;i++) {
		msg->data[i] = spi_putc(0xff);
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
 2d6:	f7 01       	movw	r30, r14
 2d8:	e1 0f       	add	r30, r17
 2da:	f1 1d       	adc	r31, r1
 2dc:	84 83       	std	Z+4, r24	; 0x04
	#endif
	
	length &= 0x0f;
	msg->length = length;
	// read data
	for (uint8_t i=0;i<length;i++) {
 2de:	1f 5f       	subi	r17, 0xFF	; 255
 2e0:	10 17       	cp	r17, r16
 2e2:	b0 f3       	brcs	.-20     	; 0x2d0 <can_get_message+0x8a>
		msg->data[i] = spi_putc(0xff);
	}
	SET(MCP2515_CS);
 2e4:	c4 9a       	sbi	0x18, 4	; 24
	
	// clear interrupt flag
	#ifdef RXnBF_FUNKTION
	if (!IS_SET(MCP2515_RX0BF))
	#else
	if (_bit_is_set(status, 6))
 2e6:	ab 28       	or	r10, r11
 2e8:	19 f0       	breq	.+6      	; 0x2f0 <can_get_message+0xaa>
	#endif
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 2ea:	8c e2       	ldi	r24, 0x2C	; 44
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <can_get_message+0xae>
	else
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 2f0:	8c e2       	ldi	r24, 0x2C	; 44
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	0e 94 77 00 	call	0xee	; 0xee <mcp2515_bit_modify>
	CAN_INDICATE_RX_TRAFFIC_FUNCTION;
	
	#ifdef RXnBF_FUNKTION
		return 1;
	#else
		return (status & 0x07) + 1;
 2fa:	8d 2d       	mov	r24, r13
 2fc:	87 70       	andi	r24, 0x07	; 7
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
	#endif
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	bf 90       	pop	r11
 310:	af 90       	pop	r10
 312:	08 95       	ret

00000314 <can_send_message>:

#include <util/delay.h>

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(const can_t *msg)
{
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
	// Status des MCP2515 auslesen
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
 320:	80 ea       	ldi	r24, 0xA0	; 160
 322:	0e 94 6f 00 	call	0xde	; 0xde <mcp2515_read_status>
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (_bit_is_clear(status, 2)) {
 326:	82 fd       	sbrc	r24, 2
 328:	02 c0       	rjmp	.+4      	; 0x32e <can_send_message+0x1a>
 32a:	ff 24       	eor	r15, r15
 32c:	0b c0       	rjmp	.+22     	; 0x344 <can_send_message+0x30>
		address = 0x00;
	}
	else if (_bit_is_clear(status, 4)) {
 32e:	84 fd       	sbrc	r24, 4
 330:	03 c0       	rjmp	.+6      	; 0x338 <can_send_message+0x24>
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	f9 2e       	mov	r15, r25
 336:	06 c0       	rjmp	.+12     	; 0x344 <can_send_message+0x30>
		address = 0x02;
	} 
	else if (_bit_is_clear(status, 6)) {
 338:	86 ff       	sbrs	r24, 6
 33a:	02 c0       	rjmp	.+4      	; 0x340 <can_send_message+0x2c>
 33c:	ff 24       	eor	r15, r15
 33e:	30 c0       	rjmp	.+96     	; 0x3a0 <can_send_message+0x8c>
 340:	84 e0       	ldi	r24, 0x04	; 4
 342:	f8 2e       	mov	r15, r24
		// Alle Puffer sind belegt,
		// Nachricht kann nicht verschickt werden
		return 0;
	}
	
	RESET(MCP2515_CS);
 344:	c4 98       	cbi	0x18, 4	; 24
	spi_putc(SPI_WRITE_TX | address);
 346:	8f 2d       	mov	r24, r15
 348:	80 64       	ori	r24, 0x40	; 64
 34a:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	#if SUPPORT_EXTENDED_CANID
		mcp2515_write_id(&msg->id, msg->flags.extended);
	#else
		mcp2515_write_id(&msg->id);
 34e:	ce 01       	movw	r24, r28
 350:	0e 94 13 02 	call	0x426	; 0x426 <mcp2515_write_id>
	#endif
	uint8_t length = msg->length & 0x0f;
 354:	0b 81       	ldd	r16, Y+3	; 0x03
 356:	0f 70       	andi	r16, 0x0F	; 15
	
	// Ist die Nachricht ein "Remote Transmit Request" ?
	if (msg->flags.rtr)
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	80 ff       	sbrs	r24, 0
 35c:	05 c0       	rjmp	.+10     	; 0x368 <can_send_message+0x54>
	{
		// Ein RTR hat zwar eine Laenge,
		// enthaelt aber keine Daten
		
		// Nachrichten Laenge + RTR einstellen
		spi_putc((1<<RTR) | length);
 35e:	80 2f       	mov	r24, r16
 360:	80 64       	ori	r24, 0x40	; 64
 362:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
 366:	0e c0       	rjmp	.+28     	; 0x384 <can_send_message+0x70>
	}
	else
	{
		// Nachrichten Laenge einstellen
		spi_putc(length);
 368:	80 2f       	mov	r24, r16
 36a:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	07 c0       	rjmp	.+14     	; 0x380 <can_send_message+0x6c>
		
		// Daten
		for (uint8_t i=0;i<length;i++) {
			spi_putc(msg->data[i]);
 372:	fe 01       	movw	r30, r28
 374:	e1 0f       	add	r30, r17
 376:	f1 1d       	adc	r31, r1
 378:	84 81       	ldd	r24, Z+4	; 0x04
 37a:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	{
		// Nachrichten Laenge einstellen
		spi_putc(length);
		
		// Daten
		for (uint8_t i=0;i<length;i++) {
 37e:	1f 5f       	subi	r17, 0xFF	; 255
 380:	10 17       	cp	r17, r16
 382:	b8 f3       	brcs	.-18     	; 0x372 <can_send_message+0x5e>
			spi_putc(msg->data[i]);
		}
	}
	SET(MCP2515_CS);
 384:	c4 9a       	sbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 386:	85 e0       	ldi	r24, 0x05	; 5
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <can_send_message+0x74>
	_delay_us(1);
	
	// CAN Nachricht verschicken
	// die letzten drei Bit im RTS Kommando geben an welcher
	// Puffer gesendet werden soll.
	RESET(MCP2515_CS);
 38c:	c4 98       	cbi	0x18, 4	; 24
	address = (address == 0) ? 1 : address;
 38e:	ff 20       	and	r15, r15
 390:	11 f4       	brne	.+4      	; 0x396 <can_send_message+0x82>
 392:	ff 24       	eor	r15, r15
 394:	f3 94       	inc	r15
	spi_putc(SPI_RTS | address);
 396:	8f 2d       	mov	r24, r15
 398:	80 68       	ori	r24, 0x80	; 128
 39a:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	SET(MCP2515_CS);
 39e:	c4 9a       	sbi	0x18, 4	; 24
	
	CAN_INDICATE_TX_TRAFFIC_FUNCTION;
	
	return address;
}
 3a0:	8f 2d       	mov	r24, r15
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	08 95       	ret

000003ae <can_static_filter>:

// ----------------------------------------------------------------------------
// Filter setzen

void mcp2515_static_filter(const uint8_t *filter)
{
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	ec 01       	movw	r28, r24
	// change to configuration mode
	mcp2515_bit_modify(CANCTRL, 0xe0, (1<<REQOP2));
 3b8:	8f e0       	ldi	r24, 0x0F	; 15
 3ba:	60 ee       	ldi	r22, 0xE0	; 224
 3bc:	40 e8       	ldi	r20, 0x80	; 128
 3be:	0e 94 77 00 	call	0xee	; 0xee <mcp2515_bit_modify>
	while ((mcp2515_read_register(CANSTAT) & 0xe0) != (1<<REQOP2))
 3c2:	8e e0       	ldi	r24, 0x0E	; 14
 3c4:	0e 94 8f 00 	call	0x11e	; 0x11e <mcp2515_read_register>
 3c8:	80 7e       	andi	r24, 0xE0	; 224
 3ca:	80 38       	cpi	r24, 0x80	; 128
 3cc:	d1 f7       	brne	.-12     	; 0x3c2 <can_static_filter+0x14>
		;
	
	mcp2515_write_register(RXB0CTRL, (1<<BUKT));
 3ce:	80 e6       	ldi	r24, 0x60	; 96
 3d0:	64 e0       	ldi	r22, 0x04	; 4
 3d2:	0e 94 9e 00 	call	0x13c	; 0x13c <mcp2515_write_register>
	mcp2515_write_register(RXB1CTRL, 0);
 3d6:	80 e7       	ldi	r24, 0x70	; 112
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	0e 94 9e 00 	call	0x13c	; 0x13c <mcp2515_write_register>
 3de:	00 e0       	ldi	r16, 0x00	; 0
    
	uint8_t i, j;
	for (i = 0; i < 0x30; i += 0x10)
	{
		RESET(MCP2515_CS);
 3e0:	c4 98       	cbi	0x18, 4	; 24
		spi_putc(SPI_WRITE);
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
		spi_putc(i);
 3e8:	80 2f       	mov	r24, r16
 3ea:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
 3ee:	10 e0       	ldi	r17, 0x00	; 0
		
		for (j = 0; j < 12; j++) 
		{
			if (i == 0x20 && j >= 0x08)
 3f0:	00 32       	cpi	r16, 0x20	; 32
 3f2:	11 f4       	brne	.+4      	; 0x3f8 <can_static_filter+0x4a>
 3f4:	18 30       	cpi	r17, 0x08	; 8
 3f6:	48 f4       	brcc	.+18     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
				break;
 3f8:	fe 01       	movw	r30, r28
			
			spi_putc(pgm_read_byte(filter++));
 3fa:	21 96       	adiw	r28, 0x01	; 1
 3fc:	e4 91       	lpm	r30, Z
 3fe:	8e 2f       	mov	r24, r30
 400:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	{
		RESET(MCP2515_CS);
		spi_putc(SPI_WRITE);
		spi_putc(i);
		
		for (j = 0; j < 12; j++) 
 404:	1f 5f       	subi	r17, 0xFF	; 255
 406:	1c 30       	cpi	r17, 0x0C	; 12
 408:	99 f7       	brne	.-26     	; 0x3f0 <can_static_filter+0x42>
			if (i == 0x20 && j >= 0x08)
				break;
			
			spi_putc(pgm_read_byte(filter++));
		}
		SET(MCP2515_CS);
 40a:	c4 9a       	sbi	0x18, 4	; 24
	
	mcp2515_write_register(RXB0CTRL, (1<<BUKT));
	mcp2515_write_register(RXB1CTRL, 0);
    
	uint8_t i, j;
	for (i = 0; i < 0x30; i += 0x10)
 40c:	00 5f       	subi	r16, 0xF0	; 240
 40e:	00 33       	cpi	r16, 0x30	; 48
 410:	39 f7       	brne	.-50     	; 0x3e0 <can_static_filter+0x32>
			spi_putc(pgm_read_byte(filter++));
		}
		SET(MCP2515_CS);
	}
	
	mcp2515_bit_modify(CANCTRL, 0xe0, 0);
 412:	8f e0       	ldi	r24, 0x0F	; 15
 414:	60 ee       	ldi	r22, 0xE0	; 224
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	0e 94 77 00 	call	0xee	; 0xee <mcp2515_bit_modify>
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	08 95       	ret

00000426 <mcp2515_write_id>:
}

#else

void mcp2515_write_id(const uint16_t *id)
{
 426:	fc 01       	movw	r30, r24
	uint8_t tmp;
	
	spi_start(*id >> 3);
 428:	80 81       	ld	r24, Z
 42a:	91 81       	ldd	r25, Z+1	; 0x01
 42c:	23 e0       	ldi	r18, 0x03	; 3
 42e:	96 95       	lsr	r25
 430:	87 95       	ror	r24
 432:	2a 95       	dec	r18
 434:	e1 f7       	brne	.-8      	; 0x42e <mcp2515_write_id+0x8>
}

#else

static void spi_start(uint8_t data) {
	SPDR = data;
 436:	8f b9       	out	0x0f, r24	; 15
void mcp2515_write_id(const uint16_t *id)
{
	uint8_t tmp;
	
	spi_start(*id >> 3);
	tmp = *((uint8_t *) id) << 5;
 438:	80 81       	ld	r24, Z
	SPDR = data;
}

static uint8_t spi_wait(void) {
	// warten bis der vorherige Werte geschrieben wurde
	while(!(SPSR & (1<<SPIF)))
 43a:	77 9b       	sbis	0x0e, 7	; 14
 43c:	fe cf       	rjmp	.-4      	; 0x43a <mcp2515_write_id+0x14>
		;
	
	return SPDR;
 43e:	9f b1       	in	r25, 0x0f	; 15
	
	spi_start(*id >> 3);
	tmp = *((uint8_t *) id) << 5;
	spi_wait();
	
	spi_putc(tmp);
 440:	82 95       	swap	r24
 442:	88 0f       	add	r24, r24
 444:	80 7e       	andi	r24, 0xE0	; 224
 446:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	spi_putc(0);
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
	spi_putc(0);
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
}
 456:	08 95       	ret

00000458 <mcp2515_read_id>:
}

#else

uint8_t mcp2515_read_id(uint16_t *id)
{
 458:	1f 93       	push	r17
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	ec 01       	movw	r28, r24
	uint8_t first;
	uint8_t tmp;
	
	first = spi_putc(0xff);
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
 466:	18 2f       	mov	r17, r24
	tmp   = spi_putc(0xff);
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
 46e:	28 2f       	mov	r18, r24
	
	if (tmp & (1 << IDE)) {
 470:	38 2f       	mov	r19, r24
 472:	83 ff       	sbrs	r24, 3
 474:	08 c0       	rjmp	.+16     	; 0x486 <mcp2515_read_id+0x2e>
		spi_putc(0xff);
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
		spi_putc(0xff);
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	0e 94 8e 02 	call	0x51c	; 0x51c <spi_putc>
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	1e c0       	rjmp	.+60     	; 0x4c2 <mcp2515_read_id+0x6a>
}

#else

extern __attribute__ ((gnu_inline)) inline void spi_start(uint8_t data) {
	SPDR = data;
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	8f b9       	out	0x0f, r24	; 15
		return 1;			// extended-frame
	}
	else {
		spi_start(0xff);
		
		*id = (uint16_t) first << 3;
 48a:	81 2f       	mov	r24, r17
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	43 e0       	ldi	r20, 0x03	; 3
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	4a 95       	dec	r20
 496:	e1 f7       	brne	.-8      	; 0x490 <mcp2515_read_id+0x38>
 498:	99 83       	std	Y+1, r25	; 0x01
 49a:	88 83       	st	Y, r24
}

extern __attribute__ ((gnu_inline)) inline uint8_t spi_wait(void) {
	// warten bis der vorherige Werte geschrieben wurde
	while(!(SPSR & (1<<SPIF)))
 49c:	77 9b       	sbis	0x0e, 7	; 14
 49e:	fe cf       	rjmp	.-4      	; 0x49c <mcp2515_read_id+0x44>
		;
	
	return SPDR;
 4a0:	8f b1       	in	r24, 0x0f	; 15
}

#else

extern __attribute__ ((gnu_inline)) inline void spi_start(uint8_t data) {
	SPDR = data;
 4a2:	8f ef       	ldi	r24, 0xFF	; 255
 4a4:	8f b9       	out	0x0f, r24	; 15
		
		spi_wait();
		spi_start(0xff);
		
		*((uint8_t *) id) |= tmp >> 5;
 4a6:	22 95       	swap	r18
 4a8:	26 95       	lsr	r18
 4aa:	27 70       	andi	r18, 0x07	; 7
 4ac:	88 81       	ld	r24, Y
 4ae:	82 2b       	or	r24, r18
 4b0:	88 83       	st	Y, r24
}

extern __attribute__ ((gnu_inline)) inline uint8_t spi_wait(void) {
	// warten bis der vorherige Werte geschrieben wurde
	while(!(SPSR & (1<<SPIF)))
 4b2:	77 9b       	sbis	0x0e, 7	; 14
 4b4:	fe cf       	rjmp	.-4      	; 0x4b2 <mcp2515_read_id+0x5a>
		;
	
	return SPDR;
 4b6:	8f b1       	in	r24, 0x0f	; 15
		
		spi_wait();
		
		if (tmp & (1 << SRR))
 4b8:	34 fd       	sbrc	r19, 4
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <mcp2515_read_id+0x68>
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <mcp2515_read_id+0x6a>
 4c0:	82 e0       	ldi	r24, 0x02	; 2
			return 2;		// RTR-frame
		else
			return 0;		// normal-frame
	}
}
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	08 95       	ret

000004ca <can_set_mode>:
#ifdef	SUPPORT_FOR_MCP2515__

// ----------------------------------------------------------------------------
void
mcp2515_set_mode(can_mode_t mode)
{
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
	uint8_t reg = 0;
	
	if (mode == LISTEN_ONLY_MODE) {
 4d0:	88 23       	and	r24, r24
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <can_set_mode+0xe>
 4d4:	10 e6       	ldi	r17, 0x60	; 96
 4d6:	09 c0       	rjmp	.+18     	; 0x4ea <can_set_mode+0x20>
		reg = (1<<REQOP1)|(1<<REQOP0);
	}
	else if (mode == LOOPBACK_MODE) {
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	11 f4       	brne	.+4      	; 0x4e0 <can_set_mode+0x16>
 4dc:	10 e4       	ldi	r17, 0x40	; 64
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <can_set_mode+0x20>
		reg = (1<<REQOP1);
	}
	else if (mode == SLEEP_MODE) {
 4e0:	83 30       	cpi	r24, 0x03	; 3
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <can_set_mode+0x1e>
 4e4:	10 e2       	ldi	r17, 0x20	; 32
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <can_set_mode+0x20>
 4e8:	10 e0       	ldi	r17, 0x00	; 0
		reg = (1<<REQOP0);
	}
		
	// set the new mode
	mcp2515_bit_modify(CANCTRL, (1<<REQOP2)|(1<<REQOP1)|(1<<REQOP0), reg);
 4ea:	8f e0       	ldi	r24, 0x0F	; 15
 4ec:	60 ee       	ldi	r22, 0xE0	; 224
 4ee:	41 2f       	mov	r20, r17
 4f0:	0e 94 77 00 	call	0xee	; 0xee <mcp2515_bit_modify>
	while ((mcp2515_read_register(CANSTAT) & 0xe0) != reg) {
 4f4:	c1 2f       	mov	r28, r17
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
 4f8:	8e e0       	ldi	r24, 0x0E	; 14
 4fa:	0e 94 8f 00 	call	0x11e	; 0x11e <mcp2515_read_register>
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	80 7e       	andi	r24, 0xE0	; 224
 502:	90 70       	andi	r25, 0x00	; 0
 504:	8c 17       	cp	r24, r28
 506:	9d 07       	cpc	r25, r29
 508:	b9 f7       	brne	.-18     	; 0x4f8 <can_set_mode+0x2e>
		// wait for the new mode to become active
	}
}
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	08 95       	ret

00000512 <mcp2515_spi_init>:
// ----------------------------------------------------------------------------
void mcp2515_spi_init(void)
{
	#ifndef USE_SOFTWARE_SPI
		// Aktivieren des SPI Master Interfaces
		SPCR = (1<<SPE)|(1<<MSTR) | R_SPCR;
 512:	81 e5       	ldi	r24, 0x51	; 81
 514:	8d b9       	out	0x0d, r24	; 13
		SPSR = R_SPSR;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	8e b9       	out	0x0e, r24	; 14
	#endif
}
 51a:	08 95       	ret

0000051c <spi_putc>:
	return data_in;
	
	#else
	
	// put byte in send-buffer
	SPDR = data;
 51c:	8f b9       	out	0x0f, r24	; 15
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
 51e:	77 9b       	sbis	0x0e, 7	; 14
 520:	fe cf       	rjmp	.-4      	; 0x51e <spi_putc+0x2>
		;
	
	return SPDR;
 522:	8f b1       	in	r24, 0x0f	; 15
	
	#endif
}
 524:	08 95       	ret

00000526 <usartConfig>:
		error |= USART_BUFFER_OVERFLOW_ERROR;

	if(error == 0)
		return USART_OK;
	return error;
}
 526:	8f 92       	push	r8
 528:	9f 92       	push	r9
 52a:	af 92       	push	r10
 52c:	bf 92       	push	r11
 52e:	cf 92       	push	r12
 530:	df 92       	push	r13
 532:	ef 92       	push	r14
 534:	ff 92       	push	r15
 536:	0f 93       	push	r16
 538:	4a 01       	movw	r8, r20
 53a:	5b 01       	movw	r10, r22
 53c:	92 2f       	mov	r25, r18
 53e:	20 91 c0 00 	lds	r18, 0x00C0
 542:	20 91 c1 00 	lds	r18, 0x00C1
 546:	20 91 c2 00 	lds	r18, 0x00C2
 54a:	2f ef       	ldi	r18, 0xFF	; 255
 54c:	e2 16       	cp	r14, r18
 54e:	21 f0       	breq	.+8      	; 0x558 <usartConfig+0x32>
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	2e 15       	cp	r18, r14
 554:	08 f4       	brcc	.+2      	; 0x558 <usartConfig+0x32>
 556:	7d c0       	rjmp	.+250    	; 0x652 <usartConfig+0x12c>
 558:	0f 3f       	cpi	r16, 0xFF	; 255
 55a:	19 f0       	breq	.+6      	; 0x562 <usartConfig+0x3c>
 55c:	03 30       	cpi	r16, 0x03	; 3
 55e:	08 f0       	brcs	.+2      	; 0x562 <usartConfig+0x3c>
 560:	7a c0       	rjmp	.+244    	; 0x656 <usartConfig+0x130>
 562:	9f 3f       	cpi	r25, 0xFF	; 255
 564:	19 f0       	breq	.+6      	; 0x56c <usartConfig+0x46>
 566:	95 30       	cpi	r25, 0x05	; 5
 568:	08 f0       	brcs	.+2      	; 0x56c <usartConfig+0x46>
 56a:	77 c0       	rjmp	.+238    	; 0x65a <usartConfig+0x134>
 56c:	8f 3f       	cpi	r24, 0xFF	; 255
 56e:	89 f4       	brne	.+34     	; 0x592 <usartConfig+0x6c>
 570:	80 91 c2 00 	lds	r24, 0x00C2
 574:	82 95       	swap	r24
 576:	86 95       	lsr	r24
 578:	86 95       	lsr	r24
 57a:	83 70       	andi	r24, 0x03	; 3
 57c:	21 f0       	breq	.+8      	; 0x586 <usartConfig+0x60>
 57e:	83 30       	cpi	r24, 0x03	; 3
 580:	09 f4       	brne	.+2      	; 0x584 <usartConfig+0x5e>
 582:	6f c0       	rjmp	.+222    	; 0x662 <usartConfig+0x13c>
 584:	05 c0       	rjmp	.+10     	; 0x590 <usartConfig+0x6a>
 586:	80 91 c0 00 	lds	r24, 0x00C0
 58a:	86 95       	lsr	r24
 58c:	81 70       	andi	r24, 0x01	; 1
 58e:	01 c0       	rjmp	.+2      	; 0x592 <usartConfig+0x6c>
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	9f ef       	ldi	r25, 0xFF	; 255
 594:	89 16       	cp	r8, r25
 596:	99 06       	cpc	r9, r25
 598:	a9 06       	cpc	r10, r25
 59a:	b9 06       	cpc	r11, r25
 59c:	09 f4       	brne	.+2      	; 0x5a0 <usartConfig+0x7a>
 59e:	5f c0       	rjmp	.+190    	; 0x65e <usartConfig+0x138>
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	b9 f0       	breq	.+46     	; 0x5d2 <usartConfig+0xac>
 5a4:	18 f0       	brcs	.+6      	; 0x5ac <usartConfig+0x86>
 5a6:	84 30       	cpi	r24, 0x04	; 4
 5a8:	39 f1       	breq	.+78     	; 0x5f8 <usartConfig+0xd2>
 5aa:	39 c0       	rjmp	.+114    	; 0x61e <usartConfig+0xf8>
 5ac:	60 e4       	ldi	r22, 0x40	; 64
 5ae:	72 e4       	ldi	r23, 0x42	; 66
 5b0:	8f e0       	ldi	r24, 0x0F	; 15
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	a5 01       	movw	r20, r10
 5b6:	94 01       	movw	r18, r8
 5b8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__udivmodsi4>
 5bc:	da 01       	movw	r26, r20
 5be:	c9 01       	movw	r24, r18
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	a1 09       	sbc	r26, r1
 5c4:	b1 09       	sbc	r27, r1
 5c6:	4c 01       	movw	r8, r24
 5c8:	5d 01       	movw	r10, r26
 5ca:	c1 2c       	mov	r12, r1
 5cc:	d1 2c       	mov	r13, r1
 5ce:	76 01       	movw	r14, r12
 5d0:	2e c0       	rjmp	.+92     	; 0x62e <usartConfig+0x108>
 5d2:	60 e8       	ldi	r22, 0x80	; 128
 5d4:	74 e8       	ldi	r23, 0x84	; 132
 5d6:	8e e1       	ldi	r24, 0x1E	; 30
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	a5 01       	movw	r20, r10
 5dc:	94 01       	movw	r18, r8
 5de:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__udivmodsi4>
 5e2:	da 01       	movw	r26, r20
 5e4:	c9 01       	movw	r24, r18
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	a1 09       	sbc	r26, r1
 5ea:	b1 09       	sbc	r27, r1
 5ec:	4c 01       	movw	r8, r24
 5ee:	5d 01       	movw	r10, r26
 5f0:	c1 2c       	mov	r12, r1
 5f2:	d1 2c       	mov	r13, r1
 5f4:	76 01       	movw	r14, r12
 5f6:	1b c0       	rjmp	.+54     	; 0x62e <usartConfig+0x108>
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	72 e1       	ldi	r23, 0x12	; 18
 5fc:	8a e7       	ldi	r24, 0x7A	; 122
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	a5 01       	movw	r20, r10
 602:	94 01       	movw	r18, r8
 604:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__udivmodsi4>
 608:	da 01       	movw	r26, r20
 60a:	c9 01       	movw	r24, r18
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	a1 09       	sbc	r26, r1
 610:	b1 09       	sbc	r27, r1
 612:	4c 01       	movw	r8, r24
 614:	5d 01       	movw	r10, r26
 616:	c1 2c       	mov	r12, r1
 618:	d1 2c       	mov	r13, r1
 61a:	76 01       	movw	r14, r12
 61c:	08 c0       	rjmp	.+16     	; 0x62e <usartConfig+0x108>
 61e:	81 2c       	mov	r8, r1
 620:	91 2c       	mov	r9, r1
 622:	a1 2c       	mov	r10, r1
 624:	b1 2c       	mov	r11, r1
 626:	c1 2c       	mov	r12, r1
 628:	d1 2c       	mov	r13, r1
 62a:	e1 2c       	mov	r14, r1
 62c:	f1 2c       	mov	r15, r1
 62e:	28 2d       	mov	r18, r8
 630:	39 2d       	mov	r19, r9
 632:	4a 2d       	mov	r20, r10
 634:	5b 2d       	mov	r21, r11
 636:	6c 2d       	mov	r22, r12
 638:	7d 2d       	mov	r23, r13
 63a:	8e 2d       	mov	r24, r14
 63c:	9f 2d       	mov	r25, r15
 63e:	08 e0       	ldi	r16, 0x08	; 8
 640:	0e 94 18 04 	call	0x830	; 0x830 <__lshrdi3>
 644:	2f 70       	andi	r18, 0x0F	; 15
 646:	20 93 c5 00 	sts	0x00C5, r18
 64a:	80 92 c4 00 	sts	0x00C4, r8
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	0f c0       	rjmp	.+30     	; 0x670 <usartConfig+0x14a>
 652:	87 e0       	ldi	r24, 0x07	; 7
 654:	0d c0       	rjmp	.+26     	; 0x670 <usartConfig+0x14a>
 656:	85 e0       	ldi	r24, 0x05	; 5
 658:	0b c0       	rjmp	.+22     	; 0x670 <usartConfig+0x14a>
 65a:	85 e0       	ldi	r24, 0x05	; 5
 65c:	09 c0       	rjmp	.+18     	; 0x670 <usartConfig+0x14a>
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	07 c0       	rjmp	.+14     	; 0x670 <usartConfig+0x14a>
 662:	2f ef       	ldi	r18, 0xFF	; 255
 664:	82 16       	cp	r8, r18
 666:	92 06       	cpc	r9, r18
 668:	a2 06       	cpc	r10, r18
 66a:	b2 06       	cpc	r11, r18
 66c:	29 f6       	brne	.-118    	; 0x5f8 <usartConfig+0xd2>
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0f 91       	pop	r16
 672:	ff 90       	pop	r15
 674:	ef 90       	pop	r14
 676:	df 90       	pop	r13
 678:	cf 90       	pop	r12
 67a:	bf 90       	pop	r11
 67c:	af 90       	pop	r10
 67e:	9f 90       	pop	r9
 680:	8f 90       	pop	r8
 682:	08 95       	ret

00000684 <usartEnableTransmitter>:
 684:	e1 ec       	ldi	r30, 0xC1	; 193
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	88 60       	ori	r24, 0x08	; 8
 68c:	80 83       	st	Z, r24
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	08 95       	ret

00000692 <usartIsBufferEmpty>:
 692:	80 91 c0 00 	lds	r24, 0x00C0
 696:	85 fb       	bst	r24, 5
 698:	88 27       	eor	r24, r24
 69a:	80 f9       	bld	r24, 0
 69c:	08 95       	ret

0000069e <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
 69e:	cf 93       	push	r28
 6a0:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
 6a2:	0e 94 49 03 	call	0x692	; 0x692 <usartIsBufferEmpty>
 6a6:	88 23       	and	r24, r24
 6a8:	e1 f3       	breq	.-8      	; 0x6a2 <usartTransmit+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
 6aa:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <updateSystemStatus>:
	MCP2515_FILTER(0),				// Mask 0 (for group 0)
	MCP2515_FILTER(0),				// Mask 1 (for group 1)
};

void updateSystemStatus(estados_t *estados)
{
 6b4:	fc 01       	movw	r30, r24
		(*estados).estBomba1 = isBitSet(PIND, aciBomba1);
 6b6:	89 b1       	in	r24, 0x09	; 9
 6b8:	83 fb       	bst	r24, 3
 6ba:	88 27       	eor	r24, r24
 6bc:	80 f9       	bld	r24, 0
 6be:	80 83       	st	Z, r24

		(*estados).estBomba2 = isBitSet(PIND, aciBomba2);
 6c0:	89 b1       	in	r24, 0x09	; 9
 6c2:	82 95       	swap	r24
 6c4:	81 70       	andi	r24, 0x01	; 1
 6c6:	81 83       	std	Z+1, r24	; 0x01
		
		(*estados).estMPPT = isBitSet(PIND, aciMPPT);
 6c8:	89 b1       	in	r24, 0x09	; 9
 6ca:	85 fb       	bst	r24, 5
 6cc:	88 27       	eor	r24, r24
 6ce:	80 f9       	bld	r24, 0
 6d0:	82 83       	std	Z+2, r24	; 0x02

		(*estados).estAux1 = isBitSet(PIND, aux1);
 6d2:	89 b1       	in	r24, 0x09	; 9
 6d4:	86 fb       	bst	r24, 6
 6d6:	88 27       	eor	r24, r24
 6d8:	80 f9       	bld	r24, 0
 6da:	83 83       	std	Z+3, r24	; 0x03

		(*estados).estAux2 = isBitSet(PIND, aux2);
 6dc:	89 b1       	in	r24, 0x09	; 9
 6de:	88 1f       	adc	r24, r24
 6e0:	88 27       	eor	r24, r24
 6e2:	88 1f       	adc	r24, r24
 6e4:	84 83       	std	Z+4, r24	; 0x04
 6e6:	08 95       	ret

000006e8 <sendSystemStatus>:
}

void sendSystemStatus(estados_t *estados)
{
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	2c 97       	sbiw	r28, 0x0c	; 12
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	de bf       	out	0x3e, r29	; 62
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	cd bf       	out	0x3d, r28	; 61
 6fc:	fc 01       	movw	r30, r24
	// Cria e define o tamanho do pacote
	can_t msg;
	msg.id = 0;
 6fe:	1a 82       	std	Y+2, r1	; 0x02
 700:	19 82       	std	Y+1, r1	; 0x01
	msg.length = 5;
 702:	85 e0       	ldi	r24, 0x05	; 5
 704:	8c 83       	std	Y+4, r24	; 0x04
	msg.flags.rtr = 0;
 706:	8b 81       	ldd	r24, Y+3	; 0x03
 708:	8e 7f       	andi	r24, 0xFE	; 254
 70a:	8b 83       	std	Y+3, r24	; 0x03
	

	// Empacota os dados a serem enviados.
	estados->all=0;
 70c:	10 82       	st	Z, r1
	msg.data[0] = (*estados).estBomba1;
 70e:	1d 82       	std	Y+5, r1	; 0x05
	msg.data[1] = (*estados).estBomba2;
 710:	81 81       	ldd	r24, Z+1	; 0x01
 712:	8e 83       	std	Y+6, r24	; 0x06
	msg.data[2] = (*estados).estMPPT;
 714:	82 81       	ldd	r24, Z+2	; 0x02
 716:	8f 83       	std	Y+7, r24	; 0x07
	msg.data[3] = (*estados).estAux1;
 718:	83 81       	ldd	r24, Z+3	; 0x03
 71a:	88 87       	std	Y+8, r24	; 0x08
	msg.data[4] = (*estados).estAux2;
 71c:	84 81       	ldd	r24, Z+4	; 0x04
 71e:	89 87       	std	Y+9, r24	; 0x09

	// Envia o pacote
	can_send_message(&msg);
 720:	ce 01       	movw	r24, r28
 722:	01 96       	adiw	r24, 0x01	; 1
 724:	0e 94 8a 01 	call	0x314	; 0x314 <can_send_message>
}
 728:	2c 96       	adiw	r28, 0x0c	; 12
 72a:	0f b6       	in	r0, 0x3f	; 63
 72c:	f8 94       	cli
 72e:	de bf       	out	0x3e, r29	; 62
 730:	0f be       	out	0x3f, r0	; 63
 732:	cd bf       	out	0x3d, r28	; 61
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <canConfig>:

void canConfig(void)
{
	// Initialize MCP2515
	can_init(BITRATE_125_KBPS);
 73a:	84 e0       	ldi	r24, 0x04	; 4
 73c:	0e 94 b0 00 	call	0x160	; 0x160 <can_init>

	// Load filters and masks
	can_static_filter(can_filter);
 740:	88 e6       	ldi	r24, 0x68	; 104
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 d7 01 	call	0x3ae	; 0x3ae <can_static_filter>
	
	//can_set_filter(0, &filter0);

	// Set normal mode
	can_set_mode(NORMAL_MODE);
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	0e 94 65 02 	call	0x4ca	; 0x4ca <can_set_mode>
 74e:	08 95       	ret

00000750 <inputsConfig>:
}

void inputsConfig(void)
{
	// set as input
	DDRD &= (0 << aciBomba1) & (0 << aciBomba2) & (0 << aciMPPT) & (0 << aux1) & (0 << aux2);
 750:	8a b1       	in	r24, 0x0a	; 10
 752:	1a b8       	out	0x0a, r1	; 10
	// set pull-up
	PORTD |= (1 << aciBomba1) & (1 << aciBomba2) & (1 << aciMPPT) & (1 << aux1) & (1 << aux2);
 754:	8b b1       	in	r24, 0x0b	; 11
 756:	8b b9       	out	0x0b, r24	; 11
 758:	08 95       	ret

0000075a <configSystem>:
}

void configSystem(void)
{
 75a:	ef 92       	push	r14
 75c:	0f 93       	push	r16
	// Configure CAN
	canConfig();
 75e:	0e 94 9d 03 	call	0x73a	; 0x73a <canConfig>

	// Configure USART
	usartConfig(USART_MODE_ASYNCHRONOUS, USART_BAUD_9600, USART_DATA_BITS_8, USART_PARITY_NONE, USART_STOP_BIT_SINGLE);
 762:	e1 2c       	mov	r14, r1
 764:	00 e0       	ldi	r16, 0x00	; 0
 766:	23 e0       	ldi	r18, 0x03	; 3
 768:	40 e8       	ldi	r20, 0x80	; 128
 76a:	55 e2       	ldi	r21, 0x25	; 37
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	0e 94 93 02 	call	0x526	; 0x526 <usartConfig>
	usartEnableTransmitter();
 776:	0e 94 42 03 	call	0x684	; 0x684 <usartEnableTransmitter>

	// Configure inputs
	inputsConfig();
 77a:	0e 94 a8 03 	call	0x750	; 0x750 <inputsConfig>
}
 77e:	0f 91       	pop	r16
 780:	ef 90       	pop	r14
 782:	08 95       	ret

00000784 <main>:

int main(void)
{
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
 78c:	61 97       	sbiw	r28, 0x11	; 17
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
	// Configure system
	configSystem();
 798:	0e 94 ad 03 	call	0x75a	; 0x75a <configSystem>

	// Initialize system status
	estados_t estados;
	estados.all = ESTADO_INICIAL;
 79c:	19 82       	std	Y+1, r1	; 0x01
			can_t received_msg;

			// Try to read the message
			if(can_get_message(&received_msg))
				// Sends via USART
				for(uint8 i=0; i<received_msg.length ;i++)
 79e:	00 e0       	ldi	r16, 0x00	; 0

	// main loop: reads a message and sends it via USART
	for(;;){

		// Checks if a new message was received
		if (can_check_message()){
 7a0:	0e 94 13 01 	call	0x226	; 0x226 <can_check_message>
 7a4:	88 23       	and	r24, r24
 7a6:	b9 f0       	breq	.+46     	; 0x7d6 <main+0x52>
			can_t received_msg;

			// Try to read the message
			if(can_get_message(&received_msg))
 7a8:	ce 01       	movw	r24, r28
 7aa:	06 96       	adiw	r24, 0x06	; 6
 7ac:	0e 94 23 01 	call	0x246	; 0x246 <can_get_message>
 7b0:	88 23       	and	r24, r24
 7b2:	89 f0       	breq	.+34     	; 0x7d6 <main+0x52>
				// Sends via USART
				for(uint8 i=0; i<received_msg.length ;i++)
 7b4:	89 85       	ldd	r24, Y+9	; 0x09
 7b6:	88 23       	and	r24, r24
 7b8:	71 f0       	breq	.+28     	; 0x7d6 <main+0x52>
 7ba:	10 2f       	mov	r17, r16
					usartTransmit(received_msg.data[i]);
 7bc:	ea e0       	ldi	r30, 0x0A	; 10
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	ec 0f       	add	r30, r28
 7c2:	fd 1f       	adc	r31, r29
 7c4:	e1 0f       	add	r30, r17
 7c6:	f1 1d       	adc	r31, r1
 7c8:	80 81       	ld	r24, Z
 7ca:	0e 94 4f 03 	call	0x69e	; 0x69e <usartTransmit>
			can_t received_msg;

			// Try to read the message
			if(can_get_message(&received_msg))
				// Sends via USART
				for(uint8 i=0; i<received_msg.length ;i++)
 7ce:	1f 5f       	subi	r17, 0xFF	; 255
 7d0:	89 85       	ldd	r24, Y+9	; 0x09
 7d2:	18 17       	cp	r17, r24
 7d4:	98 f3       	brcs	.-26     	; 0x7bc <main+0x38>
					usartTransmit(received_msg.data[i]);
		}

		// Updates system status
		updateSystemStatus(&estados);
 7d6:	ce 01       	movw	r24, r28
 7d8:	01 96       	adiw	r24, 0x01	; 1
 7da:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <updateSystemStatus>

		// Sends system status via CAN
		sendSystemStatus(&estados);
 7de:	ce 01       	movw	r24, r28
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <sendSystemStatus>

	}
 7e6:	dc cf       	rjmp	.-72     	; 0x7a0 <main+0x1c>

000007e8 <__udivmodsi4>:
 7e8:	a1 e2       	ldi	r26, 0x21	; 33
 7ea:	1a 2e       	mov	r1, r26
 7ec:	aa 1b       	sub	r26, r26
 7ee:	bb 1b       	sub	r27, r27
 7f0:	fd 01       	movw	r30, r26
 7f2:	0d c0       	rjmp	.+26     	; 0x80e <__udivmodsi4_ep>

000007f4 <__udivmodsi4_loop>:
 7f4:	aa 1f       	adc	r26, r26
 7f6:	bb 1f       	adc	r27, r27
 7f8:	ee 1f       	adc	r30, r30
 7fa:	ff 1f       	adc	r31, r31
 7fc:	a2 17       	cp	r26, r18
 7fe:	b3 07       	cpc	r27, r19
 800:	e4 07       	cpc	r30, r20
 802:	f5 07       	cpc	r31, r21
 804:	20 f0       	brcs	.+8      	; 0x80e <__udivmodsi4_ep>
 806:	a2 1b       	sub	r26, r18
 808:	b3 0b       	sbc	r27, r19
 80a:	e4 0b       	sbc	r30, r20
 80c:	f5 0b       	sbc	r31, r21

0000080e <__udivmodsi4_ep>:
 80e:	66 1f       	adc	r22, r22
 810:	77 1f       	adc	r23, r23
 812:	88 1f       	adc	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	1a 94       	dec	r1
 818:	69 f7       	brne	.-38     	; 0x7f4 <__udivmodsi4_loop>
 81a:	60 95       	com	r22
 81c:	70 95       	com	r23
 81e:	80 95       	com	r24
 820:	90 95       	com	r25
 822:	9b 01       	movw	r18, r22
 824:	ac 01       	movw	r20, r24
 826:	bd 01       	movw	r22, r26
 828:	cf 01       	movw	r24, r30
 82a:	08 95       	ret

0000082c <__ashrdi3>:
 82c:	97 fb       	bst	r25, 7
 82e:	10 f8       	bld	r1, 0

00000830 <__lshrdi3>:
 830:	16 94       	lsr	r1
 832:	00 08       	sbc	r0, r0
 834:	0f 93       	push	r16
 836:	08 30       	cpi	r16, 0x08	; 8
 838:	98 f0       	brcs	.+38     	; 0x860 <__lshrdi3+0x30>
 83a:	08 50       	subi	r16, 0x08	; 8
 83c:	23 2f       	mov	r18, r19
 83e:	34 2f       	mov	r19, r20
 840:	45 2f       	mov	r20, r21
 842:	56 2f       	mov	r21, r22
 844:	67 2f       	mov	r22, r23
 846:	78 2f       	mov	r23, r24
 848:	89 2f       	mov	r24, r25
 84a:	90 2d       	mov	r25, r0
 84c:	f4 cf       	rjmp	.-24     	; 0x836 <__lshrdi3+0x6>
 84e:	05 94       	asr	r0
 850:	97 95       	ror	r25
 852:	87 95       	ror	r24
 854:	77 95       	ror	r23
 856:	67 95       	ror	r22
 858:	57 95       	ror	r21
 85a:	47 95       	ror	r20
 85c:	37 95       	ror	r19
 85e:	27 95       	ror	r18
 860:	0a 95       	dec	r16
 862:	aa f7       	brpl	.-22     	; 0x84e <__lshrdi3+0x1e>
 864:	0f 91       	pop	r16
 866:	08 95       	ret

00000868 <_exit>:
 868:	f8 94       	cli

0000086a <__stop_program>:
 86a:	ff cf       	rjmp	.-2      	; 0x86a <__stop_program>
